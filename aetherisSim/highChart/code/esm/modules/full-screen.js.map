{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v12.2.0 (2025-04-07)\n * @module highcharts/modules/full-screen\n * @requires highcharts\n *\n * Advanced Highcharts Stock tools\n *\n * (c) 2010-2025 Highsoft AS\n * Author: Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\nimport * as __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__ from \"../highcharts.js\";\n/******/ // The require scope\n/******/ var __webpack_require__ = {};\n/******/ \n/************************************************************************/\n/******/ /* webpack/runtime/compat get default export */\n/******/ (() => {\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = (module) => {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t() => (module['default']) :\n/******/ \t\t\t() => (module);\n/******/ \t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\treturn getter;\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/define property getters */\n/******/ (() => {\n/******/ \t// define getter functions for harmony exports\n/******/ \t__webpack_require__.d = (exports, definition) => {\n/******/ \t\tfor(var key in definition) {\n/******/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/hasOwnProperty shorthand */\n/******/ (() => {\n/******/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ })();\n/******/ \n/************************************************************************/\n\n;// external [\"../highcharts.js\",\"default\"]\nconst external_highcharts_src_js_default_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"];\nvar external_highcharts_src_js_default_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_namespaceObject);\n;// external [\"../highcharts.js\",\"default\",\"AST\"]\nconst external_highcharts_src_js_default_AST_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"].AST;\nvar external_highcharts_src_js_default_AST_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_AST_namespaceObject);\n;// ./code/es-modules/Extensions/Exporting/Fullscreen.js\n/* *\n *\n *  (c) 2009-2025 Rafal Sebestjanski\n *\n *  Full screen for Highcharts\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n/**\n * The module allows user to enable display chart in full screen mode.\n * Used in StockTools too.\n * Based on default solutions in browsers.\n */\n\n\n\nconst { composed } = (external_highcharts_src_js_default_default());\n\nconst { addEvent, fireEvent, pushUnique } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction onChartBeforeRender() {\n    /**\n     * @name Highcharts.Chart#fullscreen\n     * @type {Highcharts.Fullscreen}\n     * @requires modules/full-screen\n     */\n    this.fullscreen = new Fullscreen(this);\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * Handles displaying chart's container in the fullscreen mode.\n *\n * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n *\n * @class\n * @name Highcharts.Fullscreen\n *\n * @requires modules/exporting\n */\nclass Fullscreen {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * Prepares the chart class to support fullscreen.\n     *\n     * @param {typeof_Highcharts.Chart} ChartClass\n     * The chart class to decorate with fullscreen support.\n     */\n    static compose(ChartClass) {\n        if (pushUnique(composed, 'Fullscreen')) {\n            // Initialize fullscreen\n            addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n        }\n    }\n    /* *\n     *\n     *  Constructors\n     *\n     * */\n    constructor(chart) {\n        /**\n         * Chart managed by the fullscreen controller.\n         * @name Highcharts.Fullscreen#chart\n         * @type {Highcharts.Chart}\n         */\n        this.chart = chart;\n        /**\n         * The flag is set to `true` when the chart is displayed in\n         * the fullscreen mode.\n         *\n         * @name Highcharts.Fullscreen#isOpen\n         * @type {boolean|undefined}\n         * @since 8.0.1\n         */\n        this.isOpen = false;\n        const container = chart.renderTo;\n        // Hold event and methods available only for a current browser.\n        if (!this.browserProps) {\n            if (typeof container.requestFullscreen === 'function') {\n                this.browserProps = {\n                    fullscreenChange: 'fullscreenchange',\n                    requestFullscreen: 'requestFullscreen',\n                    exitFullscreen: 'exitFullscreen'\n                };\n            }\n            else if (container.mozRequestFullScreen) {\n                this.browserProps = {\n                    fullscreenChange: 'mozfullscreenchange',\n                    requestFullscreen: 'mozRequestFullScreen',\n                    exitFullscreen: 'mozCancelFullScreen'\n                };\n            }\n            else if (container.webkitRequestFullScreen) {\n                this.browserProps = {\n                    fullscreenChange: 'webkitfullscreenchange',\n                    requestFullscreen: 'webkitRequestFullScreen',\n                    exitFullscreen: 'webkitExitFullscreen'\n                };\n            }\n            else if (container.msRequestFullscreen) {\n                this.browserProps = {\n                    fullscreenChange: 'MSFullscreenChange',\n                    requestFullscreen: 'msRequestFullscreen',\n                    exitFullscreen: 'msExitFullscreen'\n                };\n            }\n        }\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Stops displaying the chart in fullscreen mode.\n     * Exporting module required.\n     *\n     * @since       8.0.1\n     *\n     * @function    Highcharts.Fullscreen#close\n     * @return      {void}\n     * @requires    modules/full-screen\n     */\n    close() {\n        const fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n        fireEvent(chart, 'fullscreenClose', null, function () {\n            // Don't fire exitFullscreen() when user exited\n            // using 'Escape' button.\n            if (fullscreen.isOpen &&\n                fullscreen.browserProps &&\n                chart.container.ownerDocument instanceof Document) {\n                chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n            }\n            // Unbind event as it's necessary only before exiting\n            // from fullscreen.\n            if (fullscreen.unbindFullscreenEvent) {\n                fullscreen.unbindFullscreenEvent = fullscreen\n                    .unbindFullscreenEvent();\n            }\n            chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n            fullscreen.origWidth = void 0;\n            fullscreen.origHeight = void 0;\n            optionsChart.width = fullscreen.origWidthOption;\n            optionsChart.height = fullscreen.origHeightOption;\n            fullscreen.origWidthOption = void 0;\n            fullscreen.origHeightOption = void 0;\n            fullscreen.isOpen = false;\n            fullscreen.setButtonText();\n        });\n    }\n    /**\n     * Displays the chart in fullscreen mode.\n     * When fired customly by user before exporting context button is created,\n     * button's text will not be replaced - it's on the user side.\n     * Exporting module required.\n     *\n     * @since       8.0.1\n     *\n     * @function Highcharts.Fullscreen#open\n     * @return      {void}\n     * @requires    modules/full-screen\n     */\n    open() {\n        const fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n        fireEvent(chart, 'fullscreenOpen', null, function () {\n            if (optionsChart) {\n                fullscreen.origWidthOption = optionsChart.width;\n                fullscreen.origHeightOption = optionsChart.height;\n            }\n            fullscreen.origWidth = chart.chartWidth;\n            fullscreen.origHeight = chart.chartHeight;\n            // Handle exitFullscreen() method when user clicks 'Escape' button.\n            if (fullscreen.browserProps) {\n                const unbindChange = addEvent(chart.container.ownerDocument, // Chart's document\n                fullscreen.browserProps.fullscreenChange, function () {\n                    // Handle lack of async of browser's\n                    // fullScreenChange event.\n                    if (fullscreen.isOpen) {\n                        fullscreen.isOpen = false;\n                        fullscreen.close();\n                    }\n                    else {\n                        chart.setSize(null, null, false);\n                        fullscreen.isOpen = true;\n                        fullscreen.setButtonText();\n                    }\n                });\n                const unbindDestroy = addEvent(chart, 'destroy', unbindChange);\n                fullscreen.unbindFullscreenEvent = () => {\n                    unbindChange();\n                    unbindDestroy();\n                };\n                const promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                if (promise) {\n                    promise['catch'](function () {\n                        alert(// eslint-disable-line no-alert\n                        'Full screen is not supported inside a frame.');\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * Replaces the exporting context button's text when toogling the\n     * fullscreen mode.\n     *\n     * @private\n     *\n     * @since 8.0.1\n     *\n     * @requires modules/full-screen\n     */\n    setButtonText() {\n        const chart = this.chart, exportDivElements = chart.exportDivElements, exportingOptions = chart.options.exporting, menuItems = (exportingOptions &&\n            exportingOptions.buttons &&\n            exportingOptions.buttons.contextButton.menuItems), lang = chart.options.lang;\n        if (exportingOptions &&\n            exportingOptions.menuItemDefinitions &&\n            lang &&\n            lang.exitFullscreen &&\n            lang.viewFullscreen &&\n            menuItems &&\n            exportDivElements) {\n            const exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n            if (exportDivElement) {\n                external_highcharts_src_js_default_AST_default().setElementHTML(exportDivElement, !this.isOpen ?\n                    (exportingOptions.menuItemDefinitions.viewFullscreen\n                        .text ||\n                        lang.viewFullscreen) : lang.exitFullscreen);\n            }\n        }\n    }\n    /**\n     * Toggles displaying the chart in fullscreen mode.\n     * By default, when the exporting module is enabled, a context button with\n     * a drop down menu in the upper right corner accesses this function.\n     * Exporting module required.\n     *\n     * @since 8.0.1\n     *\n     * @sample      highcharts/members/chart-togglefullscreen/\n     *              Toggle fullscreen mode from a HTML button\n     *\n     * @function Highcharts.Fullscreen#toggle\n     * @requires    modules/full-screen\n     */\n    toggle() {\n        const fullscreen = this;\n        if (!fullscreen.isOpen) {\n            fullscreen.open();\n        }\n        else {\n            fullscreen.close();\n        }\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Exporting_Fullscreen = (Fullscreen);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Gets fired when closing the fullscreen\n *\n * @callback Highcharts.FullScreenfullscreenCloseCallbackFunction\n *\n * @param {Highcharts.Chart} chart\n *        The chart on which the event occurred.\n *\n * @param {global.Event} event\n *        The event that occurred.\n */\n/**\n * Gets fired when opening the fullscreen\n *\n * @callback Highcharts.FullScreenfullscreenOpenCallbackFunction\n *\n * @param {Highcharts.Chart} chart\n *        The chart on which the event occurred.\n *\n * @param {global.Event} event\n *        The event that occurred.\n */\n(''); // Keeps doclets above separated from following code\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Fires when a fullscreen is closed through the context menu item,\n * or a fullscreen is closed on the `Escape` button click,\n * or the `Chart.fullscreen.close` method.\n *\n * @sample highcharts/chart/events-fullscreen\n *         Title size change on fullscreen open\n *\n * @type      {Highcharts.FullScreenfullscreenCloseCallbackFunction}\n * @since     10.1.0\n * @context   Highcharts.Chart\n * @requires  modules/full-screen\n * @apioption chart.events.fullscreenClose\n */\n/**\n * Fires when a fullscreen is opened through the context menu item,\n * or the `Chart.fullscreen.open` method.\n *\n * @sample highcharts/chart/events-fullscreen\n *         Title size change on fullscreen open\n *\n * @type      {Highcharts.FullScreenfullscreenOpenCallbackFunction}\n * @since     10.1.0\n * @context   Highcharts.Chart\n * @requires  modules/full-screen\n * @apioption chart.events.fullscreenOpen\n */\n(''); // Keeps doclets above in transpiled file\n\n;// ./code/es-modules/masters/modules/full-screen.js\n\n\n\n\nconst G = (external_highcharts_src_js_default_default());\nG.Fullscreen = G.Fullscreen || Exporting_Fullscreen;\nG.Fullscreen.compose(G.Chart);\n/* harmony default export */ const full_screen_src = ((external_highcharts_src_js_default_default()));\n\nexport { full_screen_src as default };\n"],"names":["__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__","__webpack_require__","n","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","external_highcharts_src_js_default_namespaceObject","external_highcharts_src_js_default_default","external_highcharts_src_js_default_AST_namespaceObject","AST","external_highcharts_src_js_default_AST_default","composed","addEvent","fireEvent","pushUnique","onChartBeforeRender","fullscreen","Fullscreen","compose","ChartClass","constructor","chart","isOpen","container","renderTo","browserProps","requestFullscreen","fullscreenChange","exitFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","close","optionsChart","options","ownerDocument","Document","unbindFullscreenEvent","setSize","origWidth","origHeight","width","origWidthOption","height","origHeightOption","setButtonText","open","chartWidth","chartHeight","unbindChange","unbindDestroy","promise","alert","exportDivElements","exportingOptions","exporting","menuItems","buttons","contextButton","lang","menuItemDefinitions","viewFullscreen","exportDivElement","indexOf","setElementHTML","text","toggle","G","Chart","full_screen_src","default"],"mappings":"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"}