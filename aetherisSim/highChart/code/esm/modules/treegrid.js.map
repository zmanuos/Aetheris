{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Gantt JS v12.2.0 (2025-04-07)\n * @module highcharts/modules/treegrid\n * @requires highcharts\n *\n * Tree Grid\n *\n * (c) 2016-2025 Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\nimport * as __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__ from \"../highcharts.js\";\n/******/ // The require scope\n/******/ var __webpack_require__ = {};\n/******/ \n/************************************************************************/\n/******/ /* webpack/runtime/compat get default export */\n/******/ (() => {\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = (module) => {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t() => (module['default']) :\n/******/ \t\t\t() => (module);\n/******/ \t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\treturn getter;\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/define property getters */\n/******/ (() => {\n/******/ \t// define getter functions for harmony exports\n/******/ \t__webpack_require__.d = (exports, definition) => {\n/******/ \t\tfor(var key in definition) {\n/******/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/hasOwnProperty shorthand */\n/******/ (() => {\n/******/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ })();\n/******/ \n/************************************************************************/\n\n;// external [\"../highcharts.js\",\"default\"]\nconst external_highcharts_src_js_default_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"];\nvar external_highcharts_src_js_default_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_namespaceObject);\n;// external [\"../highcharts.js\",\"default\",\"StackItem\"]\nconst external_highcharts_src_js_default_StackItem_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"].StackItem;\nvar external_highcharts_src_js_default_StackItem_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_StackItem_namespaceObject);\n;// ./code/es-modules/Core/Axis/BrokenAxis.js\n/* *\n *\n *  (c) 2009-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { addEvent, find, fireEvent, isArray, isNumber, pick } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Composition\n *\n * */\n/**\n * Axis with support of broken data rows.\n * @private\n */\nvar BrokenAxis;\n(function (BrokenAxis) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Adds support for broken axes.\n     * @private\n     */\n    function compose(AxisClass, SeriesClass) {\n        if (!AxisClass.keepProps.includes('brokenAxis')) {\n            AxisClass.keepProps.push('brokenAxis');\n            addEvent(AxisClass, 'init', onAxisInit);\n            addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n            addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n            addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n            const seriesProto = SeriesClass.prototype;\n            seriesProto.drawBreaks = seriesDrawBreaks;\n            seriesProto.gappedPath = seriesGappedPath;\n            addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n            addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n        }\n        return AxisClass;\n    }\n    BrokenAxis.compose = compose;\n    /**\n     * @private\n     */\n    function onAxisAfterInit() {\n        if (typeof this.brokenAxis !== 'undefined') {\n            this.brokenAxis.setBreaks(this.options.breaks, false);\n        }\n    }\n    /**\n     * Force Axis to be not-ordinal when breaks are defined.\n     * @private\n     */\n    function onAxisAfterSetOptions() {\n        const axis = this;\n        if (axis.brokenAxis?.hasBreaks) {\n            axis.options.ordinal = false;\n        }\n    }\n    /**\n     * @private\n     */\n    function onAxisAfterSetTickPositions() {\n        const axis = this, brokenAxis = axis.brokenAxis;\n        if (brokenAxis?.hasBreaks) {\n            const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n            for (let i = 0; i < tickPositions.length; i++) {\n                if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                    newPositions.push(tickPositions[i]);\n                }\n            }\n            axis.tickPositions = newPositions;\n            axis.tickPositions.info = info;\n        }\n    }\n    /**\n     * @private\n     */\n    function onAxisInit() {\n        const axis = this;\n        if (!axis.brokenAxis) {\n            axis.brokenAxis = new Additions(axis);\n        }\n    }\n    /**\n     * @private\n     */\n    function onSeriesAfterGeneratePoints() {\n        const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n        // Set, or reset visibility of the points. Axis.setBreaks marks\n        // the series as isDirty\n        if (isDirty) {\n            let i = points.length;\n            while (i--) {\n                const point = points[i];\n                // Respect nulls inside the break (#4275)\n                const nullGap = point.y === null && connectNulls === false;\n                const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                    yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                // Set point.visible if in any break.\n                // If not in break, reset visible to original value.\n                point.visible = isPointInBreak ?\n                    false :\n                    point.options.visible !== false;\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    function onSeriesAfterRender() {\n        this.drawBreaks(this.xAxis, ['x']);\n        this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n    }\n    /**\n     * @private\n     */\n    function seriesDrawBreaks(axis, keys) {\n        const series = this, points = series.points;\n        let breaks, threshold, y;\n        if (axis?.brokenAxis?.hasBreaks) {\n            const brokenAxis = axis.brokenAxis;\n            keys.forEach(function (key) {\n                breaks = brokenAxis?.breakArray || [];\n                threshold = axis.isXAxis ?\n                    axis.min :\n                    pick(series.options.threshold, axis.min);\n                // Array of breaks that have been \"zoomed-out\" which means that\n                // they were shown previously, but now after zoom, they are not\n                // (#19885).\n                const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                    let isOut = true;\n                    // Iterate to see if \"brk\" is in axis range\n                    for (let i = 0; i < breaks.length; i++) {\n                        const otherBreak = breaks[i];\n                        if (otherBreak.from === brk.from &&\n                            otherBreak.to === brk.to) {\n                            isOut = false;\n                            break;\n                        }\n                    }\n                    return isOut;\n                });\n                points.forEach(function (point) {\n                    y = pick(point['stack' + key.toUpperCase()], point[key]);\n                    breaks.forEach(function (brk) {\n                        if (isNumber(threshold) && isNumber(y)) {\n                            let eventName = '';\n                            if ((threshold < brk.from && y > brk.to) ||\n                                (threshold > brk.from && y < brk.from)) {\n                                eventName = 'pointBreak';\n                            }\n                            else if ((threshold < brk.from &&\n                                y > brk.from &&\n                                y < brk.to) || (threshold > brk.from &&\n                                y > brk.to &&\n                                y < brk.from)) {\n                                eventName = 'pointInBreak';\n                            }\n                            if (eventName) {\n                                fireEvent(axis, eventName, { point, brk });\n                            }\n                        }\n                    });\n                    breaksOutOfRange?.forEach(function (brk) {\n                        fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                    });\n                });\n            });\n        }\n    }\n    /**\n     * Extend getGraphPath by identifying gaps in the data so that we\n     * can draw a gap in the line or area. This was moved from ordinal\n     * axis module to broken axis module as of #5045.\n     *\n     * @private\n     * @function Highcharts.Series#gappedPath\n     *\n     * @return {Highcharts.SVGPathArray}\n     * Gapped path\n     */\n    function seriesGappedPath() {\n        const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n        let gapSize = this.options.gapSize, i = points.length - 1, stack;\n        /**\n         * Defines when to display a gap in the graph, together with the\n         * [gapUnit](plotOptions.series.gapUnit) option.\n         *\n         * In case when `dataGrouping` is enabled, points can be grouped\n         * into a larger time span. This can make the grouped points to\n         * have a greater distance than the absolute value of `gapSize`\n         * property, which will result in disappearing graph completely.\n         * To prevent this situation the mentioned distance between\n         * grouped points is used instead of previously defined\n         * `gapSize`.\n         *\n         * In practice, this option is most often used to visualize gaps\n         * in time series. In a stock chart, intraday data is available\n         * for daytime hours, while gaps will appear in nights and\n         * weekends.\n         *\n         * @see [gapUnit](plotOptions.series.gapUnit)\n         * @see [xAxis.breaks](#xAxis.breaks)\n         *\n         * @sample {highstock} stock/plotoptions/series-gapsize/\n         * Setting the gap size to 2 introduces gaps for weekends in\n         * daily datasets.\n         *\n         * @type      {number}\n         * @default   0\n         * @product   highstock\n         * @requires  modules/broken-axis\n         * @apioption plotOptions.series.gapSize\n         */\n        /**\n         * Together with [gapSize](plotOptions.series.gapSize), this\n         * option defines where to draw gaps in the graph.\n         *\n         * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n         * means that if the distance between two points is greater than\n         * 5 times that of the two closest points, the graph will be\n         * broken.\n         *\n         * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n         * axis values, which on a datetime axis is milliseconds. This\n         * also applies to the navigator series that inherits gap\n         * options from the base series.\n         *\n         * @see [gapSize](plotOptions.series.gapSize)\n         *\n         * @type       {string}\n         * @default    relative\n         * @since      5.0.13\n         * @product    highstock\n         * @validvalue [\"relative\", \"value\"]\n         * @requires   modules/broken-axis\n         * @apioption  plotOptions.series.gapUnit\n         */\n        if (gapSize && i > 0) { // #5008\n            // Gap unit is relative\n            if (this.options.gapUnit !== 'value') {\n                gapSize *= this.basePointRange;\n            }\n            // Setting a new gapSize in case dataGrouping is enabled\n            // (#7686)\n            if (groupingSize &&\n                groupingSize > gapSize &&\n                // Except when DG is forced (e.g. from other series)\n                // and has lower granularity than actual points (#11351)\n                groupingSize >= this.basePointRange) {\n                gapSize = groupingSize;\n            }\n            // Extension for ordinal breaks\n            let current, next;\n            while (i--) {\n                // Reassign next if it is not visible\n                if (!(next && next.visible !== false)) {\n                    next = points[i + 1];\n                }\n                current = points[i];\n                // Skip iteration if one of the points is not visible\n                if (next.visible === false || current.visible === false) {\n                    continue;\n                }\n                if (next.x - current.x > gapSize) {\n                    const xRange = (current.x + next.x) / 2;\n                    points.splice(// Insert after this one\n                    i + 1, 0, {\n                        isNull: true,\n                        x: xRange\n                    });\n                    // For stacked chart generate empty stack items, #6546\n                    if (yAxis.stacking && this.options.stacking) {\n                        stack = yAxis.stacking.stacks[this.stackKey][xRange] = new (external_highcharts_src_js_default_StackItem_default())(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                        stack.total = 0;\n                    }\n                }\n                // Assign current to next for the upcoming iteration\n                next = current;\n            }\n        }\n        // Call base method\n        return this.getGraphPath(points);\n    }\n    /* *\n     *\n     *  Class\n     *\n     * */\n    /**\n     * Provides support for broken axes.\n     * @private\n     * @class\n     */\n    class Additions {\n        /* *\n         *\n         *  Static Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        static isInBreak(brk, val) {\n            const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                (val - from) % repeat :\n                repeat - ((from - val) % repeat));\n            let ret;\n            if (!brk.inclusive) {\n                ret = test < length && test !== 0;\n            }\n            else {\n                ret = test <= length;\n            }\n            return ret;\n        }\n        /**\n         * @private\n         */\n        static lin2Val(val) {\n            const axis = this;\n            const brokenAxis = axis.brokenAxis;\n            const breakArray = brokenAxis?.breakArray;\n            if (!breakArray || !isNumber(val)) {\n                return val;\n            }\n            let nval = val, brk, i;\n            for (i = 0; i < breakArray.length; i++) {\n                brk = breakArray[i];\n                if (brk.from >= nval) {\n                    break;\n                }\n                else if (brk.to < nval) {\n                    nval += brk.len;\n                }\n                else if (Additions.isInBreak(brk, nval)) {\n                    nval += brk.len;\n                }\n            }\n            return nval;\n        }\n        /**\n         * @private\n         */\n        static val2Lin(val) {\n            const axis = this;\n            const brokenAxis = axis.brokenAxis;\n            const breakArray = brokenAxis?.breakArray;\n            if (!breakArray || !isNumber(val)) {\n                return val;\n            }\n            let nval = val, brk, i;\n            for (i = 0; i < breakArray.length; i++) {\n                brk = breakArray[i];\n                if (brk.to <= val) {\n                    nval -= brk.len;\n                }\n                else if (brk.from >= val) {\n                    break;\n                }\n                else if (Additions.isInBreak(brk, val)) {\n                    nval -= (val - brk.from);\n                    break;\n                }\n            }\n            return nval;\n        }\n        /* *\n         *\n         *  Constructors\n         *\n         * */\n        constructor(axis) {\n            this.hasBreaks = false;\n            this.axis = axis;\n        }\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns the first break found where the x is larger then break.from\n         * and smaller then break.to.\n         *\n         * @param {number} x\n         * The number which should be within a break.\n         *\n         * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n         * The array of breaks to search within.\n         *\n         * @return {Highcharts.XAxisBreaksOptions|undefined}\n         * Returns the first break found that matches, returns false if no break\n         * is found.\n         */\n        findBreakAt(x, breaks) {\n            return find(breaks, function (b) {\n                return b.from < x && x < b.to;\n            });\n        }\n        /**\n         * @private\n         */\n        isInAnyBreak(val, testKeep) {\n            const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n            let i = breaks.length, inbrk, keep, ret;\n            if (i && isNumber(val)) {\n                while (i--) {\n                    if (Additions.isInBreak(breaks[i], val)) {\n                        inbrk = true;\n                        if (!keep) {\n                            keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                        }\n                    }\n                }\n                if (inbrk && testKeep) {\n                    ret = inbrk && !keep;\n                }\n                else {\n                    ret = inbrk;\n                }\n            }\n            return ret;\n        }\n        /**\n         * Dynamically set or unset breaks in an axis. This function in lighter\n         * than using Axis.update, and it also preserves animation.\n         *\n         * @private\n         * @function Highcharts.Axis#setBreaks\n         *\n         * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n         * The breaks to add. When `undefined` it removes existing breaks.\n         *\n         * @param {boolean} [redraw=true]\n         * Whether to redraw the chart immediately.\n         */\n        setBreaks(breaks, redraw) {\n            const brokenAxis = this, axis = brokenAxis.axis, time = axis.chart.time, hasBreaks = isArray(breaks) &&\n                !!breaks.length &&\n                !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n            axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n            brokenAxis.hasBreaks = hasBreaks;\n            // Compile string dates\n            breaks?.forEach((brk) => {\n                brk.from = time.parse(brk.from) || 0;\n                brk.to = time.parse(brk.to) || 0;\n            });\n            if (breaks !== axis.options.breaks) {\n                axis.options.breaks = axis.userOptions.breaks = breaks;\n            }\n            axis.forceRedraw = true; // Force recalculation in setScale\n            // Recalculate series related to the axis.\n            axis.series.forEach(function (series) {\n                series.isDirty = true;\n            });\n            if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                // Revert to prototype functions\n                delete axis.val2lin;\n                delete axis.lin2val;\n            }\n            if (hasBreaks) {\n                axis.userOptions.ordinal = false;\n                axis.lin2val = Additions.lin2Val;\n                axis.val2lin = Additions.val2Lin;\n                axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                    // If trying to set extremes inside a break, extend min to\n                    // after, and max to before the break ( #3857 )\n                    if (brokenAxis.hasBreaks) {\n                        const breaks = (this.options.breaks || []);\n                        let axisBreak;\n                        while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                            newMin = axisBreak.to;\n                        }\n                        while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                            newMax = axisBreak.from;\n                        }\n                        // If both min and max is within the same break.\n                        if (newMax < newMin) {\n                            newMax = newMin;\n                        }\n                    }\n                    axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                };\n                axis.setAxisTranslation = function () {\n                    axis.constructor.prototype.setAxisTranslation.call(this);\n                    brokenAxis.unitLength = void 0;\n                    if (brokenAxis.hasBreaks) {\n                        const breaks = axis.options.breaks || [], \n                        // Temporary one:\n                        breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                        let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                        // Min & max check (#4247)\n                        breaks.forEach(function (brk) {\n                            repeat = brk.repeat || Infinity;\n                            if (isNumber(min) && isNumber(max)) {\n                                if (Additions.isInBreak(brk, min)) {\n                                    min += ((brk.to % repeat) -\n                                        (min % repeat));\n                                }\n                                if (Additions.isInBreak(brk, max)) {\n                                    max -= ((max % repeat) -\n                                        (brk.from % repeat));\n                                }\n                            }\n                        });\n                        // Construct an array holding all breaks in the axis\n                        breaks.forEach(function (brk) {\n                            start = brk.from;\n                            repeat = brk.repeat || Infinity;\n                            if (isNumber(min) && isNumber(max)) {\n                                while (start - repeat > min) {\n                                    start -= repeat;\n                                }\n                                while (start < min) {\n                                    start += repeat;\n                                }\n                                for (i = start; i < max; i += repeat) {\n                                    breakArrayT.push({\n                                        value: i,\n                                        move: 'in'\n                                    });\n                                    breakArrayT.push({\n                                        value: i + brk.to - brk.from,\n                                        move: 'out',\n                                        size: brk.breakSize\n                                    });\n                                }\n                            }\n                        });\n                        breakArrayT.sort(function (a, b) {\n                            return ((a.value === b.value) ?\n                                ((a.move === 'in' ? 0 : 1) -\n                                    (b.move === 'in' ? 0 : 1)) :\n                                a.value - b.value);\n                        });\n                        // Simplify the breaks\n                        inBrk = 0;\n                        start = min;\n                        breakArrayT.forEach(function (brk) {\n                            inBrk += (brk.move === 'in' ? 1 : -1);\n                            if (inBrk === 1 && brk.move === 'in') {\n                                start = brk.value;\n                            }\n                            if (inBrk === 0 && isNumber(start)) {\n                                breakArray.push({\n                                    from: start,\n                                    to: brk.value,\n                                    len: brk.value - start - (brk.size || 0)\n                                });\n                                length += (brk.value -\n                                    start -\n                                    (brk.size || 0));\n                            }\n                        });\n                        brokenAxis.breakArray = breakArray;\n                        // Used with staticScale, and below the actual axis\n                        // length, when breaks are subtracted.\n                        if (isNumber(min) &&\n                            isNumber(max) &&\n                            isNumber(axis.min)) {\n                            brokenAxis.unitLength = max - min - length +\n                                pointRangePadding;\n                            fireEvent(axis, 'afterBreaks');\n                            if (axis.staticScale) {\n                                axis.transA = axis.staticScale;\n                            }\n                            else if (brokenAxis.unitLength) {\n                                axis.transA *=\n                                    (max - axis.min + pointRangePadding) /\n                                        brokenAxis.unitLength;\n                            }\n                            if (pointRangePadding) {\n                                axis.minPixelPadding =\n                                    axis.transA * (axis.minPointOffset || 0);\n                            }\n                            axis.min = min;\n                            axis.max = max;\n                        }\n                    }\n                };\n            }\n            if (pick(redraw, true)) {\n                axis.chart.redraw();\n            }\n        }\n    }\n    BrokenAxis.Additions = Additions;\n})(BrokenAxis || (BrokenAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Axis_BrokenAxis = (BrokenAxis);\n\n;// external [\"../highcharts.js\",\"default\",\"Axis\"]\nconst external_highcharts_src_js_default_Axis_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"].Axis;\nvar external_highcharts_src_js_default_Axis_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_Axis_namespaceObject);\n;// ./code/es-modules/Core/Axis/GridAxis.js\n/* *\n *\n *  (c) 2016 Highsoft AS\n *  Authors: Lars A. V. Cabrera\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { dateFormats } = (external_highcharts_src_js_default_default());\n\nconst { addEvent: GridAxis_addEvent, defined, erase, find: GridAxis_find, isArray: GridAxis_isArray, isNumber: GridAxis_isNumber, merge, pick: GridAxis_pick, timeUnits, wrap } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Enums\n *\n * */\n/**\n * Enum for which side the axis is on. Maps to axis.side.\n * @private\n */\nvar GridAxisSide;\n(function (GridAxisSide) {\n    GridAxisSide[GridAxisSide[\"top\"] = 0] = \"top\";\n    GridAxisSide[GridAxisSide[\"right\"] = 1] = \"right\";\n    GridAxisSide[GridAxisSide[\"bottom\"] = 2] = \"bottom\";\n    GridAxisSide[GridAxisSide[\"left\"] = 3] = \"left\";\n})(GridAxisSide || (GridAxisSide = {}));\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction argsToArray(args) {\n    return Array.prototype.slice.call(args, 1);\n}\n/**\n * @private\n */\nfunction isObject(x) {\n    // Always use strict mode\n    return external_highcharts_src_js_default_default().isObject(x, true);\n}\n/**\n * @private\n */\nfunction applyGridOptions(axis) {\n    const options = axis.options;\n    // Center-align by default\n    /*\n    if (!options.labels) {\n        options.labels = {};\n    }\n    */\n    options.labels.align = GridAxis_pick(options.labels.align, 'center');\n    // @todo: Check against tickLabelPlacement between/on etc\n    /* Prevents adding the last tick label if the axis is not a category\n       axis.\n       Since numeric labels are normally placed at starts and ends of a\n       range of value, and this module makes the label point at the value,\n       an \"extra\" label would appear. */\n    if (!axis.categories) {\n        options.showLastLabel = false;\n    }\n    // Prevents rotation of labels when squished, as rotating them would not\n    // help.\n    axis.labelRotation = 0;\n    options.labels.rotation = 0;\n    // Allow putting ticks closer than their data points.\n    options.minTickInterval = 1;\n}\n/**\n * Extends axis class with grid support.\n * @private\n */\nfunction compose(AxisClass, ChartClass, TickClass) {\n    if (!AxisClass.keepProps.includes('grid')) {\n        AxisClass.keepProps.push('grid');\n        AxisClass.prototype.getMaxLabelDimensions = getMaxLabelDimensions;\n        wrap(AxisClass.prototype, 'unsquish', wrapUnsquish);\n        wrap(AxisClass.prototype, 'getOffset', wrapGetOffset);\n        // Add event handlers\n        GridAxis_addEvent(AxisClass, 'init', onInit);\n        GridAxis_addEvent(AxisClass, 'afterGetTitlePosition', onAfterGetTitlePosition);\n        GridAxis_addEvent(AxisClass, 'afterInit', onAfterInit);\n        GridAxis_addEvent(AxisClass, 'afterRender', onAfterRender);\n        GridAxis_addEvent(AxisClass, 'afterSetAxisTranslation', onAfterSetAxisTranslation);\n        GridAxis_addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions);\n        GridAxis_addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions2);\n        GridAxis_addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n        GridAxis_addEvent(AxisClass, 'afterTickSize', onAfterTickSize);\n        GridAxis_addEvent(AxisClass, 'trimTicks', onTrimTicks);\n        GridAxis_addEvent(AxisClass, 'destroy', onDestroy);\n        GridAxis_addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n        GridAxis_addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n        GridAxis_addEvent(TickClass, 'labelFormat', onTickLabelFormat);\n    }\n    return AxisClass;\n}\n/**\n * Get the largest label width and height.\n *\n * @private\n * @function Highcharts.Axis#getMaxLabelDimensions\n *\n * @param {Highcharts.Dictionary<Highcharts.Tick>} ticks\n * All the ticks on one axis.\n *\n * @param {Array<number|string>} tickPositions\n * All the tick positions on one axis.\n *\n * @return {Highcharts.SizeObject}\n * Object containing the properties height and width.\n *\n * @todo Move this to the generic axis implementation, as it is used there.\n */\nfunction getMaxLabelDimensions(ticks, tickPositions) {\n    const dimensions = {\n        width: 0,\n        height: 0\n    };\n    tickPositions.forEach(function (pos) {\n        const tick = ticks[pos];\n        let labelHeight = 0, labelWidth = 0, label;\n        if (isObject(tick)) {\n            label = isObject(tick.label) ? tick.label : {};\n            // Find width and height of label\n            labelHeight = label.getBBox ? label.getBBox().height : 0;\n            if (label.textStr && !GridAxis_isNumber(label.textPxLength)) {\n                label.textPxLength = label.getBBox().width;\n            }\n            labelWidth = GridAxis_isNumber(label.textPxLength) ?\n                // Math.round ensures crisp lines\n                Math.round(label.textPxLength) :\n                0;\n            if (label.textStr) {\n                // Set the tickWidth same as the label width after ellipsis\n                // applied #10281\n                labelWidth = Math.round(label.getBBox().width);\n            }\n            // Update the result if width and/or height are larger\n            dimensions.height = Math.max(labelHeight, dimensions.height);\n            dimensions.width = Math.max(labelWidth, dimensions.width);\n        }\n    });\n    // For tree grid, add indentation\n    if (this.type === 'treegrid' &&\n        this.treeGrid &&\n        this.treeGrid.mapOfPosToGridNode) {\n        const treeDepth = this.treeGrid.mapOfPosToGridNode[-1].height || 0;\n        dimensions.width += (this.options.labels.indentation *\n            (treeDepth - 1));\n    }\n    return dimensions;\n}\n/**\n * Handle columns and getOffset.\n * @private\n */\nfunction wrapGetOffset(proceed) {\n    const { grid } = this, \n    // On the left side we handle the columns first because the offset is\n    // calculated from the plot area and out\n    columnsFirst = this.side === 3;\n    if (!columnsFirst) {\n        proceed.apply(this);\n    }\n    if (!grid?.isColumn) {\n        let columns = grid?.columns || [];\n        if (columnsFirst) {\n            columns = columns.slice().reverse();\n        }\n        columns\n            .forEach((column) => {\n            column.getOffset();\n        });\n    }\n    if (columnsFirst) {\n        proceed.apply(this);\n    }\n}\n/**\n * @private\n */\nfunction onAfterGetTitlePosition(e) {\n    const axis = this;\n    const options = axis.options;\n    const gridOptions = options.grid || {};\n    if (gridOptions.enabled === true) {\n        // Compute anchor points for each of the title align options\n        const { axisTitle, height: axisHeight, horiz, left: axisLeft, offset, opposite, options, top: axisTop, width: axisWidth } = axis;\n        const tickSize = axis.tickSize();\n        const titleWidth = axisTitle?.getBBox().width;\n        const xOption = options.title.x;\n        const yOption = options.title.y;\n        const titleMargin = GridAxis_pick(options.title.margin, horiz ? 5 : 10);\n        const titleFontSize = axisTitle ? axis.chart.renderer.fontMetrics(axisTitle).f : 0;\n        const crispCorr = tickSize ? tickSize[0] / 2 : 0;\n        // TODO account for alignment\n        // the position in the perpendicular direction of the axis\n        const offAxis = ((horiz ? axisTop + axisHeight : axisLeft) +\n            (horiz ? 1 : -1) * // Horizontal axis reverses the margin\n                (opposite ? -1 : 1) * // So does opposite axes\n                crispCorr +\n            (axis.side === GridAxisSide.bottom ? titleFontSize : 0));\n        e.titlePosition.x = horiz ?\n            axisLeft - (titleWidth || 0) / 2 - titleMargin + xOption :\n            offAxis + (opposite ? axisWidth : 0) + offset + xOption;\n        e.titlePosition.y = horiz ?\n            (offAxis -\n                (opposite ? axisHeight : 0) +\n                (opposite ? titleFontSize : -titleFontSize) / 2 +\n                offset +\n                yOption) :\n            axisTop - titleMargin + yOption;\n    }\n}\n/**\n * @private\n */\nfunction onAfterInit() {\n    const axis = this;\n    const { chart, options: { grid: gridOptions = {} }, userOptions } = axis;\n    if (gridOptions.enabled) {\n        applyGridOptions(axis);\n    }\n    if (gridOptions.columns) {\n        const columns = axis.grid.columns = [];\n        let columnIndex = axis.grid.columnIndex = 0;\n        // Handle columns, each column is a grid axis\n        while (++columnIndex < gridOptions.columns.length) {\n            const columnOptions = merge(userOptions, gridOptions.columns[columnIndex], {\n                isInternal: true,\n                linkedTo: 0,\n                // Disable by default the scrollbar on the grid axis\n                scrollbar: {\n                    enabled: false\n                }\n            }, \n            // Avoid recursion\n            {\n                grid: {\n                    columns: void 0\n                }\n            });\n            const column = new (external_highcharts_src_js_default_Axis_default())(axis.chart, columnOptions, 'yAxis');\n            column.grid.isColumn = true;\n            column.grid.columnIndex = columnIndex;\n            // Remove column axis from chart axes array, and place it\n            // in the columns array.\n            erase(chart.axes, column);\n            erase(chart[axis.coll] || [], column);\n            columns.push(column);\n        }\n    }\n}\n/**\n * Draw an extra line on the far side of the outermost axis,\n * creating floor/roof/wall of a grid. And some padding.\n * ```\n * Make this:\n *             (axis.min) __________________________ (axis.max)\n *                           |    |    |    |    |\n * Into this:\n *             (axis.min) __________________________ (axis.max)\n *                        ___|____|____|____|____|__\n * ```\n * @private\n */\nfunction onAfterRender() {\n    const axis = this, { axisTitle, grid, options } = axis, gridOptions = options.grid || {};\n    if (gridOptions.enabled === true) {\n        const min = axis.min || 0, max = axis.max || 0, firstTick = axis.ticks[axis.tickPositions[0]];\n        // Adjust the title max width to the column width (#19657)\n        if (axisTitle &&\n            !axis.chart.styledMode &&\n            firstTick?.slotWidth &&\n            !axis.options.title.style.width) {\n            axisTitle.css({ width: `${firstTick.slotWidth}px` });\n        }\n        // @todo actual label padding (top, bottom, left, right)\n        axis.maxLabelDimensions = axis.getMaxLabelDimensions(axis.ticks, axis.tickPositions);\n        // Remove right wall before rendering if updating\n        if (axis.rightWall) {\n            axis.rightWall.destroy();\n        }\n        /*\n        Draw an extra axis line on outer axes\n                    >\n        Make this:    |______|______|______|___\n\n                    > _________________________\n        Into this:    |______|______|______|__|\n                                                */\n        if (axis.grid?.isOuterAxis() && axis.axisLine) {\n            const lineWidth = options.lineWidth;\n            if (lineWidth) {\n                const linePath = axis.getLinePath(lineWidth), startPoint = linePath[0], endPoint = linePath[1], \n                // Negate distance if top or left axis\n                // Subtract 1px to draw the line at the end of the tick\n                tickLength = (axis.tickSize('tick') || [1])[0], distance = tickLength * ((axis.side === GridAxisSide.top ||\n                    axis.side === GridAxisSide.left) ? -1 : 1);\n                // If axis is horizontal, reposition line path vertically\n                if (startPoint[0] === 'M' && endPoint[0] === 'L') {\n                    if (axis.horiz) {\n                        startPoint[2] += distance;\n                        endPoint[2] += distance;\n                    }\n                    else {\n                        startPoint[1] += distance;\n                        endPoint[1] += distance;\n                    }\n                }\n                // If it doesn't exist, add an upper and lower border\n                // for the vertical grid axis.\n                if (!axis.horiz && axis.chart.marginRight) {\n                    const upperBorderStartPoint = startPoint, upperBorderEndPoint = [\n                        'L',\n                        axis.left,\n                        startPoint[2] || 0\n                    ], upperBorderPath = [\n                        upperBorderStartPoint,\n                        upperBorderEndPoint\n                    ], lowerBorderEndPoint = [\n                        'L',\n                        axis.chart.chartWidth - axis.chart.marginRight,\n                        axis.toPixels(max + axis.tickmarkOffset)\n                    ], lowerBorderStartPoint = [\n                        'M',\n                        endPoint[1] || 0,\n                        axis.toPixels(max + axis.tickmarkOffset)\n                    ], lowerBorderPath = [\n                        lowerBorderStartPoint,\n                        lowerBorderEndPoint\n                    ];\n                    if (!axis.grid.upperBorder && min % 1 !== 0) {\n                        axis.grid.upperBorder = axis.grid.renderBorder(upperBorderPath);\n                    }\n                    if (axis.grid.upperBorder) {\n                        axis.grid.upperBorder.attr({\n                            stroke: options.lineColor,\n                            'stroke-width': options.lineWidth\n                        });\n                        axis.grid.upperBorder.animate({\n                            d: upperBorderPath\n                        });\n                    }\n                    if (!axis.grid.lowerBorder && max % 1 !== 0) {\n                        axis.grid.lowerBorder = axis.grid.renderBorder(lowerBorderPath);\n                    }\n                    if (axis.grid.lowerBorder) {\n                        axis.grid.lowerBorder.attr({\n                            stroke: options.lineColor,\n                            'stroke-width': options.lineWidth\n                        });\n                        axis.grid.lowerBorder.animate({\n                            d: lowerBorderPath\n                        });\n                    }\n                }\n                // Render an extra line parallel to the existing axes, to\n                // close the grid.\n                if (!axis.grid.axisLineExtra) {\n                    axis.grid.axisLineExtra = axis.grid.renderBorder(linePath);\n                }\n                else {\n                    axis.grid.axisLineExtra.attr({\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth\n                    });\n                    axis.grid.axisLineExtra.animate({\n                        d: linePath\n                    });\n                }\n                // Show or hide the line depending on options.showEmpty\n                axis.axisLine[axis.showAxis ? 'show' : 'hide']();\n            }\n        }\n        (grid?.columns || []).forEach((column) => column.render());\n        // Manipulate the tick mark visibility\n        // based on the axis.max- allows smooth scrolling.\n        if (!axis.horiz &&\n            axis.chart.hasRendered &&\n            (axis.scrollbar || axis.linkedParent?.scrollbar) &&\n            axis.tickPositions.length) {\n            const tickmarkOffset = axis.tickmarkOffset, lastTick = axis.tickPositions[axis.tickPositions.length - 1], firstTick = axis.tickPositions[0];\n            let label, tickMark;\n            while ((label = axis.hiddenLabels.pop()) && label.element) {\n                label.show(); // #15453\n            }\n            while ((tickMark = axis.hiddenMarks.pop()) &&\n                tickMark.element) {\n                tickMark.show(); // #16439\n            }\n            // Hide/show first tick label.\n            label = axis.ticks[firstTick].label;\n            if (label) {\n                if (min - firstTick > tickmarkOffset) {\n                    axis.hiddenLabels.push(label.hide());\n                }\n                else {\n                    label.show();\n                }\n            }\n            // Hide/show last tick mark/label.\n            label = axis.ticks[lastTick].label;\n            if (label) {\n                if (lastTick - max > tickmarkOffset) {\n                    axis.hiddenLabels.push(label.hide());\n                }\n                else {\n                    label.show();\n                }\n            }\n            const mark = axis.ticks[lastTick].mark;\n            if (mark &&\n                lastTick - max < tickmarkOffset &&\n                lastTick - max > 0 && axis.ticks[lastTick].isLast) {\n                axis.hiddenMarks.push(mark.hide());\n            }\n        }\n    }\n}\n/**\n * @private\n */\nfunction onAfterSetAxisTranslation() {\n    const axis = this;\n    const tickInfo = axis.tickPositions?.info;\n    const options = axis.options;\n    const gridOptions = options.grid || {};\n    const userLabels = axis.userOptions.labels || {};\n    // Fire this only for the Gantt type chart, #14868.\n    if (gridOptions.enabled) {\n        if (axis.horiz) {\n            axis.series.forEach((series) => {\n                series.options.pointRange = 0;\n            });\n            // Lower level time ticks, like hours or minutes, represent\n            // points in time and not ranges. These should be aligned\n            // left in the grid cell by default. The same applies to\n            // years of higher order.\n            if (tickInfo &&\n                options.dateTimeLabelFormats &&\n                options.labels &&\n                !defined(userLabels.align) &&\n                (options.dateTimeLabelFormats[tickInfo.unitName]\n                    .range === false ||\n                    tickInfo.count > 1 // Years\n                )) {\n                options.labels.align = 'left';\n                if (!defined(userLabels.x)) {\n                    options.labels.x = 3;\n                }\n            }\n        }\n        else {\n            // Don't trim ticks which not in min/max range but\n            // they are still in the min/max plus tickInterval.\n            if (this.type !== 'treegrid' &&\n                axis.grid &&\n                axis.grid.columns) {\n                this.minPointOffset = this.tickInterval;\n            }\n        }\n    }\n}\n/**\n * Creates a left and right wall on horizontal axes:\n * - Places leftmost tick at the start of the axis, to create a left\n *   wall\n * - Ensures that the rightmost tick is at the end of the axis, to\n *   create a right wall.\n * @private\n */\nfunction onAfterSetOptions(e) {\n    const options = this.options, userOptions = e.userOptions, gridOptions = ((options && isObject(options.grid)) ? options.grid : {});\n    let gridAxisOptions;\n    if (gridOptions.enabled === true) {\n        // Merge the user options into default grid axis options so\n        // that when a user option is set, it takes precedence.\n        gridAxisOptions = merge(true, {\n            className: ('highcharts-grid-axis ' + (userOptions.className || '')),\n            dateTimeLabelFormats: {\n                hour: {\n                    list: ['%[HM]', '%[H]']\n                },\n                day: {\n                    list: ['%[AeB]', '%[aeb]', '%[E]']\n                },\n                week: {\n                    list: ['Week %W', 'W%W']\n                },\n                month: {\n                    list: ['%[B]', '%[b]', '%o']\n                }\n            },\n            grid: {\n                borderWidth: 1\n            },\n            labels: {\n                padding: 2,\n                style: {\n                    fontSize: '0.9em'\n                }\n            },\n            margin: 0,\n            title: {\n                text: null,\n                reserveSpace: false,\n                rotation: 0,\n                style: {\n                    textOverflow: 'ellipsis'\n                }\n            },\n            // In a grid axis, only allow one unit of certain types,\n            // for example we shouldn't have one grid cell spanning\n            // two days.\n            units: [[\n                    'millisecond', // Unit name\n                    [1, 10, 100]\n                ], [\n                    'second',\n                    [1, 10]\n                ], [\n                    'minute',\n                    [1, 5, 15]\n                ], [\n                    'hour',\n                    [1, 6]\n                ], [\n                    'day',\n                    [1]\n                ], [\n                    'week',\n                    [1]\n                ], [\n                    'month',\n                    [1]\n                ], [\n                    'year',\n                    null\n                ]]\n        }, userOptions);\n        // X-axis specific options\n        if (this.coll === 'xAxis') {\n            // For linked axes, tickPixelInterval is used only if\n            // the tickPositioner below doesn't run or returns\n            // undefined (like multiple years)\n            if (defined(userOptions.linkedTo) &&\n                !defined(userOptions.tickPixelInterval)) {\n                gridAxisOptions.tickPixelInterval = 350;\n            }\n            // For the secondary grid axis, use the primary axis'\n            // tick intervals and return ticks one level higher.\n            if (\n            // Check for tick pixel interval in options\n            !defined(userOptions.tickPixelInterval) &&\n                // Only for linked axes\n                defined(userOptions.linkedTo) &&\n                !defined(userOptions.tickPositioner) &&\n                !defined(userOptions.tickInterval) &&\n                !defined(userOptions.units)) {\n                gridAxisOptions.tickPositioner = function (min, max) {\n                    const parentInfo = this.linkedParent?.tickPositions?.info;\n                    if (parentInfo) {\n                        const units = (gridAxisOptions.units || []);\n                        let unitIdx, count = 1, unitName = 'year';\n                        for (let i = 0; i < units.length; i++) {\n                            const unit = units[i];\n                            if (unit && unit[0] === parentInfo.unitName) {\n                                unitIdx = i;\n                                break;\n                            }\n                        }\n                        // Get the first allowed count on the next unit.\n                        const unit = (GridAxis_isNumber(unitIdx) && units[unitIdx + 1]);\n                        if (unit) {\n                            unitName = unit[0] || 'year';\n                            const counts = unit[1];\n                            count = counts?.[0] || 1;\n                            // In case the base X axis shows years, make the\n                            // secondary axis show ten times the years (#11427)\n                        }\n                        else if (parentInfo.unitName === 'year') {\n                            // `unitName` is 'year'\n                            count = parentInfo.count * 10;\n                        }\n                        const unitRange = timeUnits[unitName];\n                        this.tickInterval = unitRange * count;\n                        return this.chart.time.getTimeTicks({ unitRange, count, unitName }, min, max, this.options.startOfWeek);\n                    }\n                };\n            }\n        }\n        // Now merge the combined options into the axis options\n        merge(true, this.options, gridAxisOptions);\n        if (this.horiz) {\n            /*               _________________________\n            Make this:    ___|_____|_____|_____|__|\n                            ^                     ^\n                            _________________________\n            Into this:    |_____|_____|_____|_____|\n                                ^                 ^    */\n            options.minPadding = GridAxis_pick(userOptions.minPadding, 0);\n            options.maxPadding = GridAxis_pick(userOptions.maxPadding, 0);\n        }\n        // If borderWidth is set, then use its value for tick and\n        // line width.\n        if (GridAxis_isNumber(options.grid.borderWidth)) {\n            options.tickWidth = options.lineWidth =\n                gridOptions.borderWidth;\n        }\n    }\n}\n/**\n * @private\n */\nfunction onAfterSetOptions2(e) {\n    const axis = this;\n    const userOptions = e.userOptions;\n    const gridOptions = userOptions?.grid || {};\n    const columns = gridOptions.columns;\n    // Add column options to the parent axis. Children has their column options\n    // set on init in onGridAxisAfterInit.\n    if (gridOptions.enabled && columns) {\n        merge(true, axis.options, columns[0]);\n    }\n}\n/**\n * Handle columns and setScale.\n * @private\n */\nfunction onAfterSetScale() {\n    const axis = this;\n    (axis.grid.columns || []).forEach((column) => column.setScale());\n}\n/**\n * Draw vertical axis ticks extra long to create cell floors and roofs.\n * Overrides the tickLength for vertical axes.\n * @private\n */\nfunction onAfterTickSize(e) {\n    const { horiz, maxLabelDimensions, options: { grid: gridOptions = {} } } = this;\n    if (gridOptions.enabled && maxLabelDimensions) {\n        const labelPadding = this.options.labels.distance * 2;\n        const distance = horiz ?\n            (gridOptions.cellHeight ||\n                labelPadding + maxLabelDimensions.height) :\n            labelPadding + maxLabelDimensions.width;\n        if (GridAxis_isArray(e.tickSize)) {\n            e.tickSize[0] = distance;\n        }\n        else {\n            e.tickSize = [distance, 0];\n        }\n    }\n}\n/**\n * @private\n */\nfunction onChartAfterSetChartSize() {\n    this.axes.forEach((axis) => {\n        (axis.grid?.columns || []).forEach((column) => {\n            column.setAxisSize();\n            column.setAxisTranslation();\n        });\n    });\n}\n/**\n * @private\n */\nfunction onDestroy(e) {\n    const { grid } = this;\n    (grid.columns || []).forEach((column) => column.destroy(e.keepEvents));\n    grid.columns = void 0;\n}\n/**\n * Wraps axis init to draw cell walls on vertical axes.\n * @private\n */\nfunction onInit(e) {\n    const axis = this;\n    const userOptions = e.userOptions || {};\n    const gridOptions = userOptions.grid || {};\n    if (gridOptions.enabled && defined(gridOptions.borderColor)) {\n        userOptions.tickColor = userOptions.lineColor = (gridOptions.borderColor);\n    }\n    if (!axis.grid) {\n        axis.grid = new GridAxisAdditions(axis);\n    }\n    axis.hiddenLabels = [];\n    axis.hiddenMarks = [];\n}\n/**\n * Center tick labels in cells.\n * @private\n */\nfunction onTickAfterGetLabelPosition(e) {\n    const tick = this, label = tick.label, axis = tick.axis, reversed = axis.reversed, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, labelOpts = axis.options.labels, align = labelOpts.align, \n    // `verticalAlign` is currently not supported for axis.labels.\n    verticalAlign = 'middle', // LabelOpts.verticalAlign,\n    side = GridAxisSide[axis.side], tickmarkOffset = e.tickmarkOffset, tickPositions = axis.tickPositions, tickPos = tick.pos - tickmarkOffset, nextTickPos = (GridAxis_isNumber(tickPositions[e.index + 1]) ?\n        tickPositions[e.index + 1] - tickmarkOffset :\n        (axis.max || 0) + tickmarkOffset), tickSize = axis.tickSize('tick'), tickWidth = tickSize ? tickSize[0] : 0, crispCorr = tickSize ? tickSize[1] / 2 : 0;\n    // Only center tick labels in grid axes\n    if (gridOptions.enabled === true) {\n        let bottom, top, left, right;\n        // Calculate top and bottom positions of the cell.\n        if (side === 'top') {\n            bottom = axis.top + axis.offset;\n            top = bottom - tickWidth;\n        }\n        else if (side === 'bottom') {\n            top = chart.chartHeight - axis.bottom + axis.offset;\n            bottom = top + tickWidth;\n        }\n        else {\n            bottom = axis.top + axis.len - (axis.translate(reversed ? nextTickPos : tickPos) || 0);\n            top = axis.top + axis.len - (axis.translate(reversed ? tickPos : nextTickPos) || 0);\n        }\n        // Calculate left and right positions of the cell.\n        if (side === 'right') {\n            left = chart.chartWidth - axis.right + axis.offset;\n            right = left + tickWidth;\n        }\n        else if (side === 'left') {\n            right = axis.left + axis.offset;\n            left = right - tickWidth;\n        }\n        else {\n            left = Math.round(axis.left + (axis.translate(reversed ? nextTickPos : tickPos) || 0)) - crispCorr;\n            right = Math.min(// #15742\n            Math.round(axis.left + (axis.translate(reversed ? tickPos : nextTickPos) || 0)) - crispCorr, axis.left + axis.len);\n        }\n        tick.slotWidth = right - left;\n        // Calculate the positioning of the label based on\n        // alignment.\n        e.pos.x = (align === 'left' ?\n            left :\n            align === 'right' ?\n                right :\n                left + ((right - left) / 2) // Default to center\n        );\n        e.pos.y = (verticalAlign === 'top' ?\n            top :\n            verticalAlign === 'bottom' ?\n                bottom :\n                top + ((bottom - top) / 2) // Default to middle\n        );\n        if (label) {\n            const lblMetrics = chart.renderer.fontMetrics(label), labelHeight = label.getBBox().height;\n            // Adjustment to y position to align the label correctly.\n            // Would be better to have a setter or similar for this.\n            if (!labelOpts.useHTML) {\n                const lines = Math.round(labelHeight / lblMetrics.h);\n                e.pos.y += (\n                // Center the label\n                // TODO: why does this actually center the label?\n                ((lblMetrics.b - (lblMetrics.h - lblMetrics.f)) / 2) +\n                    // Adjust for height of additional lines.\n                    -(((lines - 1) * lblMetrics.h) / 2));\n            }\n            else {\n                e.pos.y += (\n                // Readjust yCorr in htmlUpdateTransform\n                lblMetrics.b +\n                    // Adjust for height of html label\n                    -(labelHeight / 2));\n            }\n        }\n        e.pos.x += (axis.horiz && labelOpts.x) || 0;\n    }\n}\n/**\n * @private\n */\nfunction onTickLabelFormat(ctx) {\n    const { axis, value } = ctx;\n    if (axis.options.grid?.enabled) {\n        const tickPos = axis.tickPositions;\n        const series = (axis.linkedParent || axis).series[0];\n        const isFirst = value === tickPos[0];\n        const isLast = value === tickPos[tickPos.length - 1];\n        const point = series && GridAxis_find(series.options.data, function (p) {\n            return p[axis.isXAxis ? 'x' : 'y'] === value;\n        });\n        let pointCopy;\n        if (point && series.is('gantt')) {\n            // For the Gantt set point aliases to the pointCopy\n            // to do not change the original point\n            pointCopy = merge(point);\n            external_highcharts_src_js_default_default().seriesTypes.gantt.prototype.pointClass\n                .setGanttPointAliases(pointCopy, axis.chart);\n        }\n        // Make additional properties available for the\n        // formatter\n        ctx.isFirst = isFirst;\n        ctx.isLast = isLast;\n        ctx.point = pointCopy;\n    }\n}\n/**\n * Makes tick labels which are usually ignored in a linked axis\n * displayed if they are within range of linkedParent.min.\n * ```\n *                        _____________________________\n *                        |   |       |       |       |\n * Make this:             |   |   2   |   3   |   4   |\n *                        |___|_______|_______|_______|\n *                          ^\n *                        _____________________________\n *                        |   |       |       |       |\n * Into this:             | 1 |   2   |   3   |   4   |\n *                        |___|_______|_______|_______|\n *                          ^\n * ```\n * @private\n * @todo Does this function do what the drawing says? Seems to affect\n *       ticks and not the labels directly?\n */\nfunction onTrimTicks() {\n    const axis = this, options = axis.options, gridOptions = options.grid || {}, categoryAxis = axis.categories, tickPositions = axis.tickPositions, firstPos = tickPositions[0], secondPos = tickPositions[1], lastPos = tickPositions[tickPositions.length - 1], beforeLastPos = tickPositions[tickPositions.length - 2], linkedMin = axis.linkedParent?.min, linkedMax = axis.linkedParent?.max, min = linkedMin || axis.min, max = linkedMax || axis.max, tickInterval = axis.tickInterval, startLessThanMin = ( // #19845\n    GridAxis_isNumber(min) &&\n        min >= firstPos + tickInterval &&\n        min < secondPos), endMoreThanMin = (GridAxis_isNumber(min) &&\n        firstPos < min &&\n        firstPos + tickInterval > min), startLessThanMax = (GridAxis_isNumber(max) &&\n        lastPos > max &&\n        lastPos - tickInterval < max), endMoreThanMax = (GridAxis_isNumber(max) &&\n        max <= lastPos - tickInterval &&\n        max > beforeLastPos);\n    if (gridOptions.enabled === true &&\n        !categoryAxis &&\n        (axis.isXAxis || axis.isLinked)) {\n        if ((endMoreThanMin || startLessThanMin) && !options.startOnTick) {\n            tickPositions[0] = min;\n        }\n        if ((startLessThanMax || endMoreThanMax) && !options.endOnTick) {\n            tickPositions[tickPositions.length - 1] = max;\n        }\n    }\n}\n/**\n * Avoid altering tickInterval when reserving space.\n * @private\n */\nfunction wrapUnsquish(proceed) {\n    const axis = this;\n    const { options: { grid: gridOptions = {} } } = axis;\n    if (gridOptions.enabled === true && axis.categories) {\n        return axis.tickInterval;\n    }\n    return proceed.apply(axis, argsToArray(arguments));\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * Additions for grid axes.\n * @private\n * @class\n */\nclass GridAxisAdditions {\n    /* *\n    *\n    *  Constructors\n    *\n    * */\n    constructor(axis) {\n        this.axis = axis;\n    }\n    /* *\n    *\n    *  Functions\n    *\n    * */\n    /**\n     * Checks if an axis is the outer axis in its dimension. Since\n     * axes are placed outwards in order, the axis with the highest\n     * index is the outermost axis.\n     *\n     * Example: If there are multiple x-axes at the top of the chart,\n     * this function returns true if the axis supplied is the last\n     * of the x-axes.\n     *\n     * @private\n     *\n     * @return {boolean}\n     * True if the axis is the outermost axis in its dimension; false if\n     * not.\n     */\n    isOuterAxis() {\n        const axis = this.axis;\n        const chart = axis.chart;\n        const columnIndex = axis.grid.columnIndex;\n        const columns = (axis.linkedParent?.grid.columns ||\n            axis.grid.columns ||\n            []);\n        const parentAxis = columnIndex ? axis.linkedParent : axis;\n        let thisIndex = -1, lastIndex = 0;\n        // On the left side, when we have columns (not only multiple axes), the\n        // main axis is to the left\n        if (axis.side === 3 && !chart.inverted && columns.length) {\n            return !axis.linkedParent;\n        }\n        (chart[axis.coll] || []).forEach((otherAxis, index) => {\n            if (otherAxis.side === axis.side &&\n                !otherAxis.options.isInternal) {\n                lastIndex = index;\n                if (otherAxis === parentAxis) {\n                    // Get the index of the axis in question\n                    thisIndex = index;\n                }\n            }\n        });\n        return (lastIndex === thisIndex &&\n            (GridAxis_isNumber(columnIndex) ?\n                columns.length === columnIndex :\n                true));\n    }\n    /**\n     * Add extra border based on the provided path.\n     * @private\n     * @param {SVGPath} path\n     * The path of the border.\n     * @return {Highcharts.SVGElement}\n     * Border\n     */\n    renderBorder(path) {\n        const axis = this.axis, renderer = axis.chart.renderer, options = axis.options, extraBorderLine = renderer.path(path)\n            .addClass('highcharts-axis-line')\n            .add(axis.axisGroup);\n        if (!renderer.styledMode) {\n            extraBorderLine.attr({\n                stroke: options.lineColor,\n                'stroke-width': options.lineWidth,\n                zIndex: 7\n            });\n        }\n        return extraBorderLine;\n    }\n}\n/* *\n *\n *  Registry\n *\n * */\n// First letter of the day of the week, e.g. 'M' for 'Monday'.\ndateFormats.E = function (timestamp) {\n    return this.dateFormat('%a', timestamp, true).charAt(0);\n};\n// Adds week date format\ndateFormats.W = function (timestamp) {\n    const d = this.toParts(timestamp), firstDay = (d[7] + 6) % 7, thursday = d.slice(0);\n    thursday[2] = d[2] - firstDay + 3;\n    const firstThursday = this.toParts(this.makeTime(thursday[0], 0, 1));\n    if (firstThursday[7] !== 4) {\n        d[1] = 0; // Set month to January\n        d[2] = 1 + (11 - firstThursday[7]) % 7;\n    }\n    const thursdayTS = this.makeTime(thursday[0], thursday[1], thursday[2]), firstThursdayTS = this.makeTime(firstThursday[0], firstThursday[1], firstThursday[2]);\n    return (1 +\n        Math.floor((thursdayTS - firstThursdayTS) / 604800000)).toString();\n};\n/* *\n *\n *  Default Export\n *\n * */\nconst GridAxis = {\n    compose\n};\n/* harmony default export */ const Axis_GridAxis = (GridAxis);\n/* *\n *\n *  API Options\n *\n * */\n/**\n * @productdesc {gantt}\n * For grid axes (like in Gantt charts),\n * it is possible to declare as a list to provide different\n * formats depending on available space.\n *\n * Defaults to:\n * ```js\n * {\n *     hour: { list: ['%H:%M', '%H'] },\n *     day: { list: ['%A, %e. %B', '%a, %e. %b', '%E'] },\n *     week: { list: ['Week %W', 'W%W'] },\n *     month: { list: ['%B', '%b', '%o'] }\n * }\n * ```\n *\n * @sample {gantt} gantt/grid-axis/date-time-label-formats\n *         Gantt chart with custom axis date format.\n *\n * @apioption xAxis.dateTimeLabelFormats\n */\n/**\n * Set grid options for the axis labels. Requires Highcharts Gantt.\n *\n * @since     6.2.0\n * @product   gantt\n * @apioption xAxis.grid\n */\n/**\n * Enable grid on the axis labels. Defaults to true for Gantt charts.\n *\n * @type      {boolean}\n * @default   true\n * @since     6.2.0\n * @product   gantt\n * @apioption xAxis.grid.enabled\n */\n/**\n * Set specific options for each column (or row for horizontal axes) in the\n * grid. Each extra column/row is its own axis, and the axis options can be set\n * here.\n *\n * @sample gantt/demo/left-axis-table\n *         Left axis as a table\n * @sample gantt/demo/treegrid-columns\n *         Collapsible tree grid with columns\n *\n * @type      {Array<Highcharts.XAxisOptions>}\n * @apioption xAxis.grid.columns\n */\n/**\n * Set border color for the label grid lines.\n *\n * @type      {Highcharts.ColorString}\n * @default   #e6e6e6\n * @apioption xAxis.grid.borderColor\n */\n/**\n * Set border width of the label grid lines.\n *\n * @type      {number}\n * @default   1\n * @apioption xAxis.grid.borderWidth\n */\n/**\n * Set cell height for grid axis labels. By default this is calculated from font\n * size. This option only applies to horizontal axes. For vertical axes, check\n * the [#yAxis.staticScale](yAxis.staticScale) option.\n *\n * @sample gantt/grid-axis/cellheight\n *         Gant chart with custom cell height\n * @type      {number}\n * @apioption xAxis.grid.cellHeight\n */\n''; // Keeps doclets above in JS file\n\n;// ./code/es-modules/Gantt/Tree.js\n/* *\n *\n *  (c) 2016-2025 Highsoft AS\n *\n *  Authors: Jon Arild Nygard\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Imports\n *\n * */\n\nconst { extend, isNumber: Tree_isNumber, pick: Tree_pick } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Creates an object map from parent id to children's index.\n *\n * @private\n * @function Highcharts.Tree#getListOfParents\n *\n * @param {Array<*>} data\n *        List of points set in options. `Array.parent` is parent id of point.\n *\n * @return {Highcharts.Dictionary<Array<*>>}\n * Map from parent id to children index in data\n */\nfunction getListOfParents(data) {\n    const root = '', ids = [], listOfParents = data.reduce((prev, curr) => {\n        const { parent = '', id } = curr;\n        if (typeof prev[parent] === 'undefined') {\n            prev[parent] = [];\n        }\n        prev[parent].push(curr);\n        if (id) {\n            ids.push(id);\n        }\n        return prev;\n    }, {});\n    Object.keys(listOfParents).forEach((node) => {\n        if ((node !== root) && (ids.indexOf(node) === -1)) {\n            const adoptedByRoot = listOfParents[node].map(function (orphan) {\n                const { ...parentExcluded } = orphan; // #15196\n                return parentExcluded;\n            });\n            listOfParents[root].push(...adoptedByRoot);\n            delete listOfParents[node];\n        }\n    });\n    return listOfParents;\n}\n/** @private */\nfunction getNode(id, parent, level, data, mapOfIdToChildren, options) {\n    const after = options && options.after, before = options && options.before, node = {\n        data,\n        depth: level - 1,\n        id,\n        level,\n        parent: (parent || '')\n    };\n    let descendants = 0, height = 0, start, end;\n    // Allow custom logic before the children has been created.\n    if (typeof before === 'function') {\n        before(node, options);\n    }\n    // Call getNode recursively on the children. Calculate the height of the\n    // node, and the number of descendants.\n    const children = ((mapOfIdToChildren[id] || [])).map((child) => {\n        const node = getNode(child.id, id, (level + 1), child, mapOfIdToChildren, options), childStart = child.start || NaN, childEnd = (child.milestone === true ?\n            childStart :\n            child.end ||\n                NaN);\n        // Start should be the lowest child.start.\n        start = ((!Tree_isNumber(start) || childStart < start) ?\n            childStart :\n            start);\n        // End should be the largest child.end.\n        // If child is milestone, then use start as end.\n        end = ((!Tree_isNumber(end) || childEnd > end) ?\n            childEnd :\n            end);\n        descendants = descendants + 1 + node.descendants;\n        height = Math.max(node.height + 1, height);\n        return node;\n    });\n    // Calculate start and end for point if it is not already explicitly set.\n    if (data) {\n        data.start = Tree_pick(data.start, start);\n        data.end = Tree_pick(data.end, end);\n    }\n    extend(node, {\n        children: children,\n        descendants: descendants,\n        height: height\n    });\n    // Allow custom logic after the children has been created.\n    if (typeof after === 'function') {\n        after(node, options);\n    }\n    return node;\n}\n/** @private */\nfunction getTree(data, options) {\n    return getNode('', null, 1, null, getListOfParents(data), options);\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst Tree = {\n    getNode,\n    getTree\n};\n/* harmony default export */ const Gantt_Tree = (Tree);\n\n;// ./code/es-modules/Core/Axis/TreeGrid/TreeGridTick.js\n/* *\n *\n *  (c) 2016 Highsoft AS\n *  Authors: Jon Arild Nygard\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { addEvent: TreeGridTick_addEvent, removeEvent, isObject: TreeGridTick_isObject, isNumber: TreeGridTick_isNumber, pick: TreeGridTick_pick, wrap: TreeGridTick_wrap } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction onTickInit() {\n    const tick = this;\n    if (!tick.treeGrid) {\n        tick.treeGrid = new TreeGridTickAdditions(tick);\n    }\n}\n/**\n * @private\n */\nfunction onTickHover(label) {\n    label.addClass('highcharts-treegrid-node-active');\n    if (!label.renderer.styledMode) {\n        label.css({\n            textDecoration: 'underline'\n        });\n    }\n}\n/**\n * @private\n */\nfunction onTickHoverExit(label, options) {\n    const css = TreeGridTick_isObject(options.style) ? options.style : {};\n    label.removeClass('highcharts-treegrid-node-active');\n    if (!label.renderer.styledMode) {\n        label.css({ textDecoration: (css.textDecoration || 'none') });\n    }\n}\n/**\n * @private\n */\nfunction renderLabelIcon(tick, params) {\n    const treeGrid = tick.treeGrid, isNew = !treeGrid.labelIcon, renderer = params.renderer, labelBox = params.xy, options = params.options, width = options.width || 0, height = options.height || 0, padding = options.padding ?? tick.axis.linkedParent ? 0 : 5, iconCenter = {\n        x: labelBox.x - (width / 2) - padding,\n        y: labelBox.y - (height / 2)\n    }, rotation = params.collapsed ? 90 : 180, shouldRender = params.show && TreeGridTick_isNumber(iconCenter.y);\n    let icon = treeGrid.labelIcon;\n    if (!icon) {\n        treeGrid.labelIcon = icon = renderer\n            .path(renderer.symbols[options.type](options.x || 0, options.y || 0, width, height))\n            .addClass('highcharts-label-icon')\n            .add(params.group);\n    }\n    // Set the new position, and show or hide\n    icon[shouldRender ? 'show' : 'hide'](); // #14904, #1338\n    // Presentational attributes\n    if (!renderer.styledMode) {\n        icon\n            .attr({\n            cursor: 'pointer',\n            'fill': TreeGridTick_pick(params.color, \"#666666\" /* Palette.neutralColor60 */),\n            'stroke-width': 1,\n            stroke: options.lineColor,\n            strokeWidth: options.lineWidth || 0\n        });\n    }\n    // Update the icon positions\n    icon[isNew ? 'attr' : 'animate']({\n        translateX: iconCenter.x,\n        translateY: iconCenter.y,\n        rotation: rotation\n    });\n}\n/**\n * @private\n */\nfunction wrapGetLabelPosition(proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n    const tick = this, lbOptions = TreeGridTick_pick(tick.options?.labels, labelOptions), pos = tick.pos, axis = tick.axis, isTreeGrid = axis.type === 'treegrid', result = proceed.apply(tick, [x, y, label, horiz, lbOptions, tickmarkOffset, index, step]);\n    let mapOfPosToGridNode, node, level;\n    if (isTreeGrid) {\n        const { width = 0, padding = axis.linkedParent ? 0 : 5 } = (lbOptions && TreeGridTick_isObject(lbOptions.symbol, true) ?\n            lbOptions.symbol :\n            {}), indentation = (lbOptions && TreeGridTick_isNumber(lbOptions.indentation) ?\n            lbOptions.indentation :\n            0);\n        mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode;\n        node = mapOfPosToGridNode?.[pos];\n        level = node?.depth || 1;\n        result.x += (\n        // Add space for symbols\n        (width + (padding * 2)) +\n            // Apply indentation\n            ((level - 1) * indentation));\n    }\n    return result;\n}\n/**\n * @private\n */\nfunction wrapRenderLabel(proceed) {\n    const tick = this, { pos, axis, label, treeGrid: tickGrid, options: tickOptions } = tick, icon = tickGrid?.labelIcon, labelElement = label?.element, { treeGrid: axisGrid, options: axisOptions, chart, tickPositions } = axis, mapOfPosToGridNode = axisGrid.mapOfPosToGridNode, labelOptions = TreeGridTick_pick(tickOptions?.labels, axisOptions?.labels), symbolOptions = (labelOptions && TreeGridTick_isObject(labelOptions.symbol, true) ?\n        labelOptions.symbol :\n        {}), node = mapOfPosToGridNode?.[pos], { descendants, depth } = node || {}, hasDescendants = node && descendants && descendants > 0, level = depth, isTreeGridElement = (axis.type === 'treegrid') && labelElement, shouldRender = tickPositions.indexOf(pos) > -1, prefixClassName = 'highcharts-treegrid-node-', prefixLevelClass = prefixClassName + 'level-', styledMode = chart.styledMode;\n    let collapsed, addClassName, removeClassName;\n    if (isTreeGridElement && node) {\n        // Add class name for hierarchical styling.\n        label\n            .removeClass(new RegExp(prefixLevelClass + '.*'))\n            .addClass(prefixLevelClass + level);\n    }\n    proceed.apply(tick, Array.prototype.slice.call(arguments, 1));\n    if (isTreeGridElement && hasDescendants) {\n        collapsed = axisGrid.isCollapsed(node);\n        renderLabelIcon(tick, {\n            color: (!styledMode &&\n                label.styles.color ||\n                ''),\n            collapsed: collapsed,\n            group: label.parentGroup,\n            options: symbolOptions,\n            renderer: label.renderer,\n            show: shouldRender,\n            xy: label.xy\n        });\n        // Add class name for the node.\n        addClassName = prefixClassName +\n            (collapsed ? 'collapsed' : 'expanded');\n        removeClassName = prefixClassName +\n            (collapsed ? 'expanded' : 'collapsed');\n        label\n            .addClass(addClassName)\n            .removeClass(removeClassName);\n        if (!styledMode) {\n            label.css({\n                cursor: 'pointer'\n            });\n        }\n        // Add events to both label text and icon\n        [label, icon].forEach((object) => {\n            if (object && !object.attachedTreeGridEvents) {\n                // On hover\n                TreeGridTick_addEvent(object.element, 'mouseover', function () {\n                    onTickHover(label);\n                });\n                // On hover out\n                TreeGridTick_addEvent(object.element, 'mouseout', function () {\n                    onTickHoverExit(label, labelOptions);\n                });\n                TreeGridTick_addEvent(object.element, 'click', function () {\n                    tickGrid.toggleCollapse();\n                });\n                object.attachedTreeGridEvents = true;\n            }\n        });\n    }\n    else if (icon) {\n        removeEvent(labelElement);\n        label?.css({ cursor: 'default' });\n        icon.destroy();\n    }\n}\n/* *\n *\n *  Classes\n *\n * */\n/**\n * @private\n * @class\n */\nclass TreeGridTickAdditions {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * @private\n     */\n    static compose(TickClass) {\n        const tickProto = TickClass.prototype;\n        if (!tickProto.toggleCollapse) {\n            TreeGridTick_addEvent(TickClass, 'init', onTickInit);\n            TreeGridTick_wrap(tickProto, 'getLabelPosition', wrapGetLabelPosition);\n            TreeGridTick_wrap(tickProto, 'renderLabel', wrapRenderLabel);\n            // Backwards compatibility\n            tickProto.collapse = function (redraw) {\n                this.treeGrid.collapse(redraw);\n            };\n            tickProto.expand = function (redraw) {\n                this.treeGrid.expand(redraw);\n            };\n            tickProto.toggleCollapse = function (redraw) {\n                this.treeGrid.toggleCollapse(redraw);\n            };\n        }\n    }\n    /* *\n     *\n     *  Constructors\n     *\n     * */\n    /**\n     * @private\n     */\n    constructor(tick) {\n        this.tick = tick;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Collapse the grid cell. Used when axis is of type treegrid.\n     *\n     * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n     *\n     * @private\n     * @function Highcharts.Tick#collapse\n     *\n     * @param {boolean} [redraw=true]\n     * Whether to redraw the chart or wait for an explicit call to\n     * {@link Highcharts.Chart#redraw}\n     */\n    collapse(redraw) {\n        const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n        if (brokenAxis &&\n            axis.treeGrid.mapOfPosToGridNode) {\n            const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.collapse(node);\n            brokenAxis.setBreaks(breaks, TreeGridTick_pick(redraw, true));\n        }\n    }\n    /**\n     * Destroy remaining labelIcon if exist.\n     *\n     * @private\n     * @function Highcharts.Tick#destroy\n     */\n    destroy() {\n        if (this.labelIcon) {\n            this.labelIcon.destroy();\n        }\n    }\n    /**\n     * Expand the grid cell. Used when axis is of type treegrid.\n     *\n     * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n     *\n     * @private\n     * @function Highcharts.Tick#expand\n     *\n     * @param {boolean} [redraw=true]\n     * Whether to redraw the chart or wait for an explicit call to\n     * {@link Highcharts.Chart#redraw}\n     */\n    expand(redraw) {\n        const { pos, axis } = this.tick, { treeGrid, brokenAxis } = axis, posMappedNodes = treeGrid.mapOfPosToGridNode;\n        if (brokenAxis && posMappedNodes) {\n            const node = posMappedNodes[pos], breaks = treeGrid.expand(node);\n            brokenAxis.setBreaks(breaks, TreeGridTick_pick(redraw, true));\n        }\n    }\n    /**\n     * Toggle the collapse/expand state of the grid cell. Used when axis is\n     * of type treegrid.\n     *\n     * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n     *\n     * @private\n     * @function Highcharts.Tick#toggleCollapse\n     *\n     * @param {boolean} [redraw=true]\n     * Whether to redraw the chart or wait for an explicit call to\n     * {@link Highcharts.Chart#redraw}\n     */\n    toggleCollapse(redraw) {\n        const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n        if (brokenAxis &&\n            axis.treeGrid.mapOfPosToGridNode) {\n            const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.toggleCollapse(node);\n            brokenAxis.setBreaks(breaks, TreeGridTick_pick(redraw, true));\n        }\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const TreeGridTick = (TreeGridTickAdditions);\n\n;// external [\"../highcharts.js\",\"default\",\"Color\"]\nconst external_highcharts_src_js_default_Color_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"].Color;\nvar external_highcharts_src_js_default_Color_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_Color_namespaceObject);\n;// ./code/es-modules/Series/TreeUtilities.js\n/* *\n *\n *  (c) 2014-2025 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { extend: TreeUtilities_extend, isArray: TreeUtilities_isArray, isNumber: TreeUtilities_isNumber, isObject: TreeUtilities_isObject, merge: TreeUtilities_merge, pick: TreeUtilities_pick, relativeLength } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Functions\n *\n * */\n/* eslint-disable valid-jsdoc */\n/**\n * @private\n */\nfunction getColor(node, options) {\n    const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n    let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n    /**\n     * @private\n     */\n    const variateColor = (color) => {\n        const colorVariation = level && level.colorVariation;\n        if (colorVariation &&\n            colorVariation.key === 'brightness' &&\n            index &&\n            siblings) {\n            return external_highcharts_src_js_default_Color_default().parse(color).brighten(colorVariation.to * (index / siblings)).get();\n        }\n        return color;\n    };\n    if (node) {\n        point = points[node.i];\n        level = mapOptionsToLevel[node.level] || {};\n        getColorByPoint = point && level.colorByPoint;\n        if (getColorByPoint) {\n            colorIndexByPoint = point.index % (colors ?\n                colors.length :\n                chartOptionsChart.colorCount);\n            colorByPoint = colors && colors[colorIndexByPoint];\n        }\n        // Select either point color, level color or inherited color.\n        if (!series.chart.styledMode) {\n            color = TreeUtilities_pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n        }\n        colorIndex = TreeUtilities_pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n    }\n    return {\n        color: color,\n        colorIndex: colorIndex\n    };\n}\n/**\n * Creates a map from level number to its given options.\n *\n * @private\n *\n * @param {Object} params\n * Object containing parameters.\n * - `defaults` Object containing default options. The default options are\n *   merged with the userOptions to get the final options for a specific\n *   level.\n * - `from` The lowest level number.\n * - `levels` User options from series.levels.\n * - `to` The highest level number.\n *\n * @return {Highcharts.Dictionary<object>|null}\n * Returns a map from level number to its given options.\n */\nfunction getLevelOptions(params) {\n    const result = {};\n    let defaults, converted, i, from, to, levels;\n    if (TreeUtilities_isObject(params)) {\n        from = TreeUtilities_isNumber(params.from) ? params.from : 1;\n        levels = params.levels;\n        converted = {};\n        defaults = TreeUtilities_isObject(params.defaults) ? params.defaults : {};\n        if (TreeUtilities_isArray(levels)) {\n            converted = levels.reduce((obj, item) => {\n                let level, levelIsConstant, options;\n                if (TreeUtilities_isObject(item) && TreeUtilities_isNumber(item.level)) {\n                    options = TreeUtilities_merge({}, item);\n                    levelIsConstant = TreeUtilities_pick(options.levelIsConstant, defaults.levelIsConstant);\n                    // Delete redundant properties.\n                    delete options.levelIsConstant;\n                    delete options.level;\n                    // Calculate which level these options apply to.\n                    level = item.level + (levelIsConstant ? 0 : from - 1);\n                    if (TreeUtilities_isObject(obj[level])) {\n                        TreeUtilities_merge(true, obj[level], options); // #16329\n                    }\n                    else {\n                        obj[level] = options;\n                    }\n                }\n                return obj;\n            }, {});\n        }\n        to = TreeUtilities_isNumber(params.to) ? params.to : 1;\n        for (i = 0; i <= to; i++) {\n            result[i] = TreeUtilities_merge({}, defaults, TreeUtilities_isObject(converted[i]) ? converted[i] : {});\n        }\n    }\n    return result;\n}\n/**\n * @private\n * @todo Combine buildTree and buildNode with setTreeValues\n * @todo Remove logic from Treemap and make it utilize this mixin.\n */\nfunction setTreeValues(tree, options) {\n    const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n    let childrenTotal = 0;\n    tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n    tree.name = TreeUtilities_pick(point && point.name, '');\n    tree.visible = (idRoot === tree.id ||\n        options.visible === true);\n    if (typeof before === 'function') {\n        tree = before(tree, options);\n    }\n    // First give the children some values\n    tree.children.forEach((child, i) => {\n        const newOptions = TreeUtilities_extend({}, options);\n        TreeUtilities_extend(newOptions, {\n            index: i,\n            siblings: tree.children.length,\n            visible: tree.visible\n        });\n        child = setTreeValues(child, newOptions);\n        children.push(child);\n        if (child.visible) {\n            childrenTotal += child.val;\n        }\n    });\n    // Set the values\n    const value = TreeUtilities_pick(optionsPoint.value, childrenTotal);\n    tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n    tree.children = children;\n    tree.childrenTotal = childrenTotal;\n    tree.isLeaf = tree.visible && !childrenTotal;\n    tree.val = value;\n    return tree;\n}\n/**\n * Update the rootId property on the series. Also makes sure that it is\n * accessible to exporting.\n *\n * @private\n *\n * @param {Object} series\n * The series to operate on.\n *\n * @return {string}\n * Returns the resulting rootId after update.\n */\nfunction updateRootId(series) {\n    let rootId, options;\n    if (TreeUtilities_isObject(series)) {\n        // Get the series options.\n        options = TreeUtilities_isObject(series.options) ? series.options : {};\n        // Calculate the rootId.\n        rootId = TreeUtilities_pick(series.rootNode, options.rootId, '');\n        // Set rootId on series.userOptions to pick it up in exporting.\n        if (TreeUtilities_isObject(series.userOptions)) {\n            series.userOptions.rootId = rootId;\n        }\n        // Set rootId on series to pick it up on next update.\n        series.rootNode = rootId;\n    }\n    return rootId;\n}\n/**\n * Get the node width, which relies on the plot width and the nodeDistance\n * option.\n *\n * @private\n */\nfunction getNodeWidth(series, columnCount) {\n    const { chart, options } = series, { nodeDistance = 0, nodeWidth = 0 } = options, { plotSizeX = 1 } = chart;\n    // Node width auto means they are evenly distributed along the width of\n    // the plot area\n    if (nodeWidth === 'auto') {\n        if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n            const fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n            return plotSizeX / total;\n        }\n        const nDistance = Number(nodeDistance);\n        return ((plotSizeX + nDistance) /\n            (columnCount || 1)) - nDistance;\n    }\n    return relativeLength(nodeWidth, plotSizeX);\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst TreeUtilities = {\n    getColor,\n    getLevelOptions,\n    getNodeWidth,\n    setTreeValues,\n    updateRootId\n};\n/* harmony default export */ const Series_TreeUtilities = (TreeUtilities);\n\n;// ./code/es-modules/Core/Axis/TreeGrid/TreeGridAxis.js\n/* *\n *\n *  (c) 2016 Highsoft AS\n *  Authors: Jon Arild Nygard\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\n\n\n\nconst { getLevelOptions: TreeGridAxis_getLevelOptions } = Series_TreeUtilities;\n\nconst { addEvent: TreeGridAxis_addEvent, isArray: TreeGridAxis_isArray, splat, find: TreeGridAxis_find, fireEvent: TreeGridAxis_fireEvent, isObject: TreeGridAxis_isObject, isString, merge: TreeGridAxis_merge, pick: TreeGridAxis_pick, removeEvent: TreeGridAxis_removeEvent, wrap: TreeGridAxis_wrap } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Variables\n *\n * */\nlet TickConstructor;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction getBreakFromNode(node, max) {\n    const to = node.collapseEnd || 0;\n    let from = node.collapseStart || 0;\n    // In broken-axis, the axis.max is minimized until it is not within a\n    // break. Therefore, if break.to is larger than axis.max, the axis.to\n    // should not add the 0.5 axis.tickMarkOffset, to avoid adding a break\n    // larger than axis.max.\n    // TODO consider simplifying broken-axis and this might solve itself\n    if (to >= max) {\n        from -= 0.5;\n    }\n    return {\n        from: from,\n        to: to,\n        showPoints: false\n    };\n}\n/**\n * Creates a tree structure of the data, and the treegrid. Calculates\n * categories, and y-values of points based on the tree.\n *\n * @private\n * @function getTreeGridFromData\n *\n * @param {Array<Highcharts.GanttPointOptions>} data\n * All the data points to display in the axis.\n *\n * @param {boolean} uniqueNames\n * Whether or not the data node with the same name should share grid cell. If\n * true they do share cell. False by default.\n *\n * @param {number} numberOfSeries\n *\n * @return {Object}\n * Returns an object containing categories, mapOfIdToNode,\n * mapOfPosToGridNode, and tree.\n *\n * @todo There should be only one point per line.\n * @todo It should be optional to have one category per point, or merge\n *       cells\n * @todo Add unit-tests.\n */\nfunction getTreeGridFromData(data, uniqueNames, numberOfSeries) {\n    const categories = [], collapsedNodes = [], mapOfIdToNode = {}, uniqueNamesEnabled = uniqueNames || false;\n    let mapOfPosToGridNode = {}, posIterator = -1;\n    // Build the tree from the series data.\n    const treeParams = {\n        // After the children has been created.\n        after: function (node) {\n            const gridNode = mapOfPosToGridNode[node.pos];\n            let height = 0, descendants = 0;\n            gridNode.children.forEach(function (child) {\n                descendants += (child.descendants || 0) + 1;\n                height = Math.max((child.height || 0) + 1, height);\n            });\n            gridNode.descendants = descendants;\n            gridNode.height = height;\n            if (gridNode.collapsed) {\n                collapsedNodes.push(gridNode);\n            }\n        },\n        // Before the children has been created.\n        before: function (node) {\n            const data = TreeGridAxis_isObject(node.data, true) ?\n                node.data :\n                {}, name = isString(data.name) ? data.name : '', parentNode = mapOfIdToNode[node.parent], parentGridNode = (TreeGridAxis_isObject(parentNode, true) ?\n                mapOfPosToGridNode[parentNode.pos] :\n                null), hasSameName = function (x) {\n                return x.name === name;\n            };\n            let gridNode, pos;\n            // If not unique names, look for sibling node with the same name\n            if (uniqueNamesEnabled &&\n                TreeGridAxis_isObject(parentGridNode, true) &&\n                !!(gridNode = TreeGridAxis_find(parentGridNode.children, hasSameName))) {\n                // If there is a gridNode with the same name, reuse position\n                pos = gridNode.pos;\n                // Add data node to list of nodes in the grid node.\n                gridNode.nodes.push(node);\n            }\n            else {\n                // If it is a new grid node, increment position.\n                pos = posIterator++;\n            }\n            // Add new grid node to map.\n            if (!mapOfPosToGridNode[pos]) {\n                mapOfPosToGridNode[pos] = gridNode = {\n                    depth: parentGridNode ? parentGridNode.depth + 1 : 0,\n                    name: name,\n                    id: data.id,\n                    nodes: [node],\n                    children: [],\n                    pos: pos\n                };\n                // If not root, then add name to categories.\n                if (pos !== -1) {\n                    categories.push(name);\n                }\n                // Add name to list of children.\n                if (TreeGridAxis_isObject(parentGridNode, true)) {\n                    parentGridNode.children.push(gridNode);\n                }\n            }\n            // Add data node to map\n            if (isString(node.id)) {\n                mapOfIdToNode[node.id] = node;\n            }\n            // If one of the points are collapsed, then start the grid node\n            // in collapsed state.\n            if (gridNode &&\n                data.collapsed === true) {\n                gridNode.collapsed = true;\n            }\n            // Assign pos to data node\n            node.pos = pos;\n        }\n    };\n    const updateYValuesAndTickPos = function (map, numberOfSeries) {\n        const setValues = function (gridNode, start, result) {\n            const nodes = gridNode.nodes, padding = 0.5;\n            let end = start + (start === -1 ? 0 : numberOfSeries - 1);\n            const diff = (end - start) / 2, pos = start + diff;\n            nodes.forEach(function (node) {\n                const data = node.data;\n                if (TreeGridAxis_isObject(data, true)) {\n                    // Update point\n                    data.y = start + (data.seriesIndex || 0);\n                    // Remove the property once used\n                    delete data.seriesIndex;\n                }\n                node.pos = pos;\n            });\n            result[pos] = gridNode;\n            gridNode.pos = pos;\n            gridNode.tickmarkOffset = diff + padding;\n            gridNode.collapseStart = end + padding;\n            gridNode.children.forEach(function (child) {\n                setValues(child, end + 1, result);\n                end = (child.collapseEnd || 0) - padding;\n            });\n            // Set collapseEnd to the end of the last child node.\n            gridNode.collapseEnd = end + padding;\n            return result;\n        };\n        return setValues(map['-1'], -1, {});\n    };\n    // Create tree from data\n    const tree = Gantt_Tree.getTree(data, treeParams);\n    // Update y values of data, and set calculate tick positions.\n    mapOfPosToGridNode = updateYValuesAndTickPos(mapOfPosToGridNode, numberOfSeries);\n    // Return the resulting data.\n    return {\n        categories: categories,\n        mapOfIdToNode: mapOfIdToNode,\n        mapOfPosToGridNode: mapOfPosToGridNode,\n        collapsedNodes: collapsedNodes,\n        tree: tree\n    };\n}\n/**\n * Builds the tree of categories and calculates its positions.\n * @private\n * @param {Object} e Event object\n * @param {Object} e.target The chart instance which the event was fired on.\n * @param {object[]} e.target.axes The axes of the chart.\n */\nfunction onBeforeRender(e) {\n    const chart = e.target, axes = chart.axes;\n    axes.filter((axis) => axis.type === 'treegrid').forEach(function (axis) {\n        const options = axis.options || {}, labelOptions = options.labels, uniqueNames = axis.uniqueNames, max = chart.time.parse(options.max), \n        // Check whether any of series is rendering for the first\n        // time, visibility has changed, or its data is dirty, and\n        // only then update. #10570, #10580. Also check if\n        // mapOfPosToGridNode exists. #10887\n        isDirty = (!axis.treeGrid.mapOfPosToGridNode ||\n            axis.series.some(function (series) {\n                return !series.hasRendered ||\n                    series.isDirtyData ||\n                    series.isDirty;\n            }));\n        let numberOfSeries = 0, data, treeGrid;\n        if (isDirty) {\n            const seriesHasPrimitivePoints = [];\n            // Concatenate data from all series assigned to this axis.\n            data = axis.series.reduce(function (arr, s) {\n                const seriesData = (s.options.data || []), firstPoint = seriesData[0], \n                // Check if the first point is a simple array of values.\n                // If so we assume that this is the case for all points.\n                foundPrimitivePoint = (Array.isArray(firstPoint) &&\n                    !firstPoint.find((value) => (typeof value === 'object')));\n                seriesHasPrimitivePoints.push(foundPrimitivePoint);\n                if (s.visible) {\n                    // Push all data to array\n                    seriesData.forEach(function (pointOptions) {\n                        // For using keys, or when using primitive points,\n                        // rebuild the data structure\n                        if (foundPrimitivePoint || s.options.keys?.length) {\n                            pointOptions = s.pointClass.prototype\n                                .optionsToObject\n                                .call({ series: s }, pointOptions);\n                            s.pointClass.setGanttPointAliases(pointOptions, chart);\n                        }\n                        if (TreeGridAxis_isObject(pointOptions, true)) {\n                            // Set series index on data. Removed again\n                            // after use.\n                            pointOptions.seriesIndex = (numberOfSeries);\n                            arr.push(pointOptions);\n                        }\n                    });\n                    // Increment series index\n                    if (uniqueNames === true) {\n                        numberOfSeries++;\n                    }\n                }\n                return arr;\n            }, []);\n            // If max is higher than set data - add a\n            // dummy data to render categories #10779\n            if (max && data.length < max) {\n                for (let i = data.length; i <= max; i++) {\n                    data.push({\n                        // Use the zero-width character\n                        // to avoid conflict with uniqueNames\n                        name: i + '\\u200B'\n                    });\n                }\n            }\n            // `setScale` is fired after all the series is initialized,\n            // which is an ideal time to update the axis.categories.\n            treeGrid = getTreeGridFromData(data, uniqueNames || false, (uniqueNames === true) ? numberOfSeries : 1);\n            // Assign values to the axis.\n            axis.categories = treeGrid.categories;\n            axis.treeGrid.mapOfPosToGridNode = (treeGrid.mapOfPosToGridNode);\n            axis.hasNames = true;\n            axis.treeGrid.tree = treeGrid.tree;\n            // Update yData now that we have calculated the y values\n            axis.series.forEach(function (series, index) {\n                const axisData = (series.options.data || []).map(function (d) {\n                    if (seriesHasPrimitivePoints[index] ||\n                        (TreeGridAxis_isArray(d) &&\n                            series.options.keys &&\n                            series.options.keys.length)) {\n                        // Get the axisData from the data array used to\n                        // build the treeGrid where has been modified\n                        data.forEach(function (point) {\n                            const toArray = splat(d);\n                            if (toArray.indexOf(point.x || 0) >= 0 &&\n                                toArray.indexOf(point.x2 || 0) >= 0) {\n                                d = point;\n                            }\n                        });\n                    }\n                    return TreeGridAxis_isObject(d, true) ? TreeGridAxis_merge(d) : d;\n                });\n                // Avoid destroying points when series is not visible\n                if (series.visible) {\n                    series.setData(axisData, false);\n                }\n            });\n            // Calculate the label options for each level in the tree.\n            axis.treeGrid.mapOptionsToLevel =\n                TreeGridAxis_getLevelOptions({\n                    defaults: labelOptions,\n                    from: 1,\n                    levels: labelOptions?.levels,\n                    to: axis.treeGrid.tree?.height\n                });\n            // Setting initial collapsed nodes\n            if (e.type === 'beforeRender') {\n                axis.treeGrid.collapsedNodes = treeGrid.collapsedNodes;\n            }\n        }\n    });\n}\n/**\n * Generates a tick for initial positioning.\n *\n * @private\n * @function Highcharts.GridAxis#generateTick\n *\n * @param {Function} proceed\n * The original generateTick function.\n *\n * @param {number} pos\n * The tick position in axis values.\n */\nfunction wrapGenerateTick(proceed, pos) {\n    const axis = this, mapOptionsToLevel = axis.treeGrid.mapOptionsToLevel || {}, isTreeGrid = axis.type === 'treegrid', ticks = axis.ticks;\n    let tick = ticks[pos], levelOptions, options, gridNode;\n    if (isTreeGrid &&\n        axis.treeGrid.mapOfPosToGridNode) {\n        gridNode = axis.treeGrid.mapOfPosToGridNode[pos];\n        levelOptions = mapOptionsToLevel[gridNode.depth];\n        if (levelOptions) {\n            options = {\n                labels: levelOptions\n            };\n        }\n        if (!tick &&\n            TickConstructor) {\n            ticks[pos] = tick =\n                new TickConstructor(axis, pos, void 0, void 0, {\n                    category: gridNode.name,\n                    tickmarkOffset: gridNode.tickmarkOffset,\n                    options: options\n                });\n        }\n        else {\n            // Update labels depending on tick interval\n            tick.parameters.category = gridNode.name;\n            tick.options = options;\n            tick.addLabel();\n        }\n    }\n    else {\n        proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n    }\n}\n/**\n * @private\n */\nfunction wrapInit(proceed, chart, userOptions, coll) {\n    const axis = this, isTreeGrid = userOptions.type === 'treegrid';\n    if (!axis.treeGrid) {\n        axis.treeGrid = new TreeGridAxisAdditions(axis);\n    }\n    // Set default and forced options for TreeGrid\n    if (isTreeGrid) {\n        // Add event for updating the categories of a treegrid.\n        // NOTE Preferably these events should be set on the axis.\n        TreeGridAxis_addEvent(chart, 'beforeRender', onBeforeRender);\n        TreeGridAxis_addEvent(chart, 'beforeRedraw', onBeforeRender);\n        // Add new collapsed nodes on addseries\n        TreeGridAxis_addEvent(chart, 'addSeries', function (e) {\n            if (e.options.data) {\n                const treeGrid = getTreeGridFromData(e.options.data, userOptions.uniqueNames || false, 1);\n                axis.treeGrid.collapsedNodes = (axis.treeGrid.collapsedNodes || []).concat(treeGrid.collapsedNodes);\n            }\n        });\n        // Collapse all nodes in axis.treegrid.collapsednodes\n        // where collapsed equals true.\n        TreeGridAxis_addEvent(axis, 'foundExtremes', function () {\n            if (axis.treeGrid.collapsedNodes) {\n                axis.treeGrid.collapsedNodes.forEach(function (node) {\n                    const breaks = axis.treeGrid.collapse(node);\n                    if (axis.brokenAxis) {\n                        axis.brokenAxis.setBreaks(breaks, false);\n                        // Remove the node from the axis collapsedNodes\n                        if (axis.treeGrid.collapsedNodes) {\n                            axis.treeGrid.collapsedNodes = axis.treeGrid\n                                .collapsedNodes\n                                .filter((n) => ((node.collapseStart !==\n                                n.collapseStart) ||\n                                node.collapseEnd !== n.collapseEnd));\n                        }\n                    }\n                });\n            }\n        });\n        // If staticScale is not defined on the yAxis\n        // and chart height is set, set axis.isDirty\n        // to ensure collapsing works (#12012)\n        TreeGridAxis_addEvent(axis, 'afterBreaks', function () {\n            if (axis.coll === 'yAxis' &&\n                !axis.staticScale &&\n                axis.chart.options.chart.height) {\n                axis.isDirty = true;\n            }\n        });\n        userOptions = TreeGridAxis_merge({\n            // Default options\n            grid: {\n                enabled: true\n            },\n            // TODO: add support for align in treegrid.\n            labels: {\n                align: 'left',\n                /**\n                * Set options on specific levels in a tree grid axis. Takes\n                * precedence over labels options.\n                *\n                * @sample {gantt} gantt/treegrid-axis/labels-levels\n                *         Levels on TreeGrid Labels\n                *\n                * @type      {Array<*>}\n                * @product   gantt\n                * @apioption yAxis.labels.levels\n                *\n                * @private\n                */\n                levels: [{\n                        /**\n                        * Specify the level which the options within this object\n                        * applies to.\n                        *\n                        * @type      {number}\n                        * @product   gantt\n                        * @apioption yAxis.labels.levels.level\n                        *\n                        * @private\n                        */\n                        level: void 0\n                    }, {\n                        level: 1,\n                        /**\n                         * @type      {Highcharts.CSSObject}\n                         * @product   gantt\n                         * @apioption yAxis.labels.levels.style\n                         *\n                         * @private\n                         */\n                        style: {\n                            /** @ignore-option */\n                            fontWeight: 'bold'\n                        }\n                    }],\n                /**\n                 * The symbol for the collapse and expand icon in a\n                 * treegrid.\n                 *\n                 * @product      gantt\n                 * @optionparent yAxis.labels.symbol\n                 *\n                 * @private\n                 */\n                symbol: {\n                    /**\n                     * The symbol type. Points to a definition function in\n                     * the `Highcharts.Renderer.symbols` collection.\n                     *\n                     * @type {Highcharts.SymbolKeyValue}\n                     *\n                     * @private\n                     */\n                    type: 'triangle',\n                    x: -5,\n                    y: -5,\n                    height: 10,\n                    width: 10\n                }\n            },\n            uniqueNames: false\n        }, userOptions, {\n            // Forced options\n            reversed: true\n        });\n    }\n    // Now apply the original function with the original arguments, which are\n    // sliced off this function's arguments\n    proceed.apply(axis, [chart, userOptions, coll]);\n    if (isTreeGrid) {\n        axis.hasNames = true;\n        axis.options.showLastLabel = true;\n    }\n}\n/**\n * Set the tick positions, tickInterval, axis min and max.\n *\n * @private\n * @function Highcharts.GridAxis#setTickInterval\n *\n * @param {Function} proceed\n * The original setTickInterval function.\n */\nfunction wrapSetTickInterval(proceed) {\n    const axis = this, options = axis.options, time = axis.chart.time, linkedParent = typeof options.linkedTo === 'number' ?\n        this.chart[axis.coll]?.[options.linkedTo] :\n        void 0, isTreeGrid = axis.type === 'treegrid';\n    if (isTreeGrid) {\n        axis.min = axis.userMin ?? time.parse(options.min) ?? axis.dataMin;\n        axis.max = axis.userMax ?? time.parse(options.max) ?? axis.dataMax;\n        TreeGridAxis_fireEvent(axis, 'foundExtremes');\n        // `setAxisTranslation` modifies the min and max according to axis\n        // breaks.\n        axis.setAxisTranslation();\n        axis.tickInterval = 1;\n        axis.tickmarkOffset = 0.5;\n        axis.tickPositions = axis.treeGrid.mapOfPosToGridNode ?\n            axis.treeGrid.getTickPositions() :\n            [];\n        if (linkedParent) {\n            const linkedParentExtremes = linkedParent.getExtremes();\n            axis.min = TreeGridAxis_pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);\n            axis.max = TreeGridAxis_pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);\n            axis.tickPositions = linkedParent.tickPositions;\n        }\n        axis.linkedParent = linkedParent;\n    }\n    else {\n        proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n    }\n}\n/**\n * Wrap axis redraw to remove TreeGrid events from ticks\n *\n * @private\n * @function Highcharts.GridAxis#redraw\n *\n * @param {Function} proceed\n * The original setTickInterval function.\n */\nfunction wrapRedraw(proceed) {\n    const axis = this, isTreeGrid = this.type === 'treegrid';\n    if (isTreeGrid && axis.visible) {\n        axis.tickPositions.forEach(function (pos) {\n            const tick = axis.ticks[pos];\n            if (tick.label?.attachedTreeGridEvents) {\n                TreeGridAxis_removeEvent(tick.label.element);\n                tick.label.attachedTreeGridEvents = false;\n            }\n        });\n    }\n    proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n}\n/* *\n *\n *  Classes\n *\n * */\n/**\n * @private\n * @class\n */\nclass TreeGridAxisAdditions {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * @private\n     */\n    static compose(AxisClass, ChartClass, SeriesClass, TickClass) {\n        if (!AxisClass.keepProps.includes('treeGrid')) {\n            const axisProps = AxisClass.prototype;\n            AxisClass.keepProps.push('treeGrid');\n            TreeGridAxis_wrap(axisProps, 'generateTick', wrapGenerateTick);\n            TreeGridAxis_wrap(axisProps, 'init', wrapInit);\n            TreeGridAxis_wrap(axisProps, 'setTickInterval', wrapSetTickInterval);\n            TreeGridAxis_wrap(axisProps, 'redraw', wrapRedraw);\n            // Make utility functions available for testing.\n            axisProps.utils = {\n                getNode: Gantt_Tree.getNode\n            };\n            if (!TickConstructor) {\n                TickConstructor = TickClass;\n            }\n        }\n        Axis_GridAxis.compose(AxisClass, ChartClass, TickClass);\n        Axis_BrokenAxis.compose(AxisClass, SeriesClass);\n        TreeGridTick.compose(TickClass);\n        return AxisClass;\n    }\n    /* *\n     *\n     *  Constructors\n     *\n     * */\n    /**\n     * @private\n     */\n    constructor(axis) {\n        this.axis = axis;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Set the collapse status.\n     *\n     * @private\n     *\n     * @param {Highcharts.Axis} axis\n     * The axis to check against.\n     *\n     * @param {Highcharts.GridNode} node\n     * The node to collapse.\n     */\n    setCollapsedStatus(node) {\n        const axis = this.axis, chart = axis.chart;\n        axis.series.forEach(function (series) {\n            const data = series.options.data;\n            if (node.id && data) {\n                const point = chart.get(node.id), dataPoint = data[series.data.indexOf(point)];\n                if (point && dataPoint) {\n                    point.collapsed = node.collapsed;\n                    dataPoint.collapsed = node.collapsed;\n                }\n            }\n        });\n    }\n    /**\n     * Calculates the new axis breaks to collapse a node.\n     *\n     * @private\n     *\n     * @param {Highcharts.Axis} axis\n     * The axis to check against.\n     *\n     * @param {Highcharts.GridNode} node\n     * The node to collapse.\n     *\n     * @param {number} pos\n     * The tick position to collapse.\n     *\n     * @return {Array<object>}\n     * Returns an array of the new breaks for the axis.\n     */\n    collapse(node) {\n        const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n        breaks.push(obj);\n        // Change the collapsed flag #13838\n        node.collapsed = true;\n        axis.treeGrid.setCollapsedStatus(node);\n        return breaks;\n    }\n    /**\n     * Calculates the new axis breaks to expand a node.\n     *\n     * @private\n     *\n     * @param {Highcharts.Axis} axis\n     * The axis to check against.\n     *\n     * @param {Highcharts.GridNode} node\n     * The node to expand.\n     *\n     * @param {number} pos\n     * The tick position to expand.\n     *\n     * @return {Array<object>}\n     * Returns an array of the new breaks for the axis.\n     */\n    expand(node) {\n        const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n        // Change the collapsed flag #13838\n        node.collapsed = false;\n        axis.treeGrid.setCollapsedStatus(node);\n        // Remove the break from the axis breaks array.\n        return breaks.reduce(function (arr, b) {\n            if (b.to !== obj.to || b.from !== obj.from) {\n                arr.push(b);\n            }\n            return arr;\n        }, []);\n    }\n    /**\n     * Creates a list of positions for the ticks on the axis. Filters out\n     * positions that are outside min and max, or is inside an axis break.\n     *\n     * @private\n     *\n     * @return {Array<number>}\n     * List of positions.\n     */\n    getTickPositions() {\n        const axis = this.axis, roundedMin = Math.floor(axis.min / axis.tickInterval) * axis.tickInterval, roundedMax = Math.ceil(axis.max / axis.tickInterval) * axis.tickInterval;\n        return Object.keys(axis.treeGrid.mapOfPosToGridNode || {}).reduce(function (arr, key) {\n            const pos = +key;\n            if (pos >= roundedMin &&\n                pos <= roundedMax &&\n                !axis.brokenAxis?.isInAnyBreak(pos)) {\n                arr.push(pos);\n            }\n            return arr;\n        }, []);\n    }\n    /**\n     * Check if a node is collapsed.\n     *\n     * @private\n     *\n     * @param {Highcharts.Axis} axis\n     * The axis to check against.\n     *\n     * @param {Object} node\n     * The node to check if is collapsed.\n     *\n     * @param {number} pos\n     * The tick position to collapse.\n     *\n     * @return {boolean}\n     * Returns true if collapsed, false if expanded.\n     */\n    isCollapsed(node) {\n        const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n        return breaks.some(function (b) {\n            return b.from === obj.from && b.to === obj.to;\n        });\n    }\n    /**\n     * Calculates the new axis breaks after toggling the collapse/expand\n     * state of a node. If it is collapsed it will be expanded, and if it is\n     * expanded it will be collapsed.\n     *\n     * @private\n     *\n     * @param {Highcharts.Axis} axis\n     * The axis to check against.\n     *\n     * @param {Highcharts.GridNode} node\n     * The node to toggle.\n     *\n     * @return {Array<object>}\n     * Returns an array of the new breaks for the axis.\n     */\n    toggleCollapse(node) {\n        return (this.isCollapsed(node) ?\n            this.expand(node) :\n            this.collapse(node));\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const TreeGridAxis = (TreeGridAxisAdditions);\n\n;// ./code/es-modules/masters/modules/treegrid.js\n\n\n\n\nconst G = (external_highcharts_src_js_default_default());\nTreeGridAxis.compose(G.Axis, G.Chart, G.Series, G.Tick);\n/* harmony default export */ const treegrid_src = ((external_highcharts_src_js_default_default()));\n\nexport { treegrid_src as default };\n"],"names":["TickConstructor","__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__","GridAxisSide","BrokenAxis","__webpack_require__","n","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","external_highcharts_src_js_default_namespaceObject","external_highcharts_src_js_default_default","external_highcharts_src_js_default_StackItem_namespaceObject","StackItem","external_highcharts_src_js_default_StackItem_default","addEvent","find","fireEvent","isArray","isNumber","pick","onAxisAfterInit","brokenAxis","setBreaks","options","breaks","onAxisAfterSetOptions","axis","hasBreaks","ordinal","onAxisAfterSetTickPositions","tickPositions","info","newPositions","i","length","isInAnyBreak","push","onAxisInit","Additions","onSeriesAfterGeneratePoints","isDirty","connectNulls","points","xAxis","yAxis","point","isPointInBreak","y","x","visible","onSeriesAfterRender","drawBreaks","pointArrayMap","seriesDrawBreaks","keys","threshold","series","forEach","breakArray","isXAxis","min","breaksOutOfRange","filter","brk","isOut","otherBreak","from","to","toUpperCase","eventName","seriesGappedPath","currentDataGrouping","groupingSize","gapSize","slice","current","next","gapUnit","basePointRange","xRange","splice","isNull","stacking","stack","stacks","stackKey","stackLabels","total","getGraphPath","compose","AxisClass","SeriesClass","keepProps","includes","seriesProto","gappedPath","isInBreak","val","ret","repeat","Infinity","test","inclusive","lin2Val","nval","len","val2Lin","constructor","findBreakAt","b","testKeep","inbrk","keep","showPoints","redraw","time","chart","parse","userOptions","forceRedraw","val2lin","lin2val","setExtremes","newMin","newMax","animation","eventArguments","axisBreak","setAxisTranslation","unitLength","breakArrayT","pointRangePadding","inBrk","userMin","max","userMax","start","value","move","size","breakSize","sort","staticScale","transA","minPixelPadding","minPointOffset","Axis_BrokenAxis","external_highcharts_src_js_default_Axis_namespaceObject","Axis","external_highcharts_src_js_default_Axis_default","dateFormats","GridAxis_addEvent","defined","erase","GridAxis_find","GridAxis_isArray","GridAxis_isNumber","merge","GridAxis_pick","timeUnits","wrap","isObject","getMaxLabelDimensions","ticks","dimensions","width","height","pos","tick","labelHeight","labelWidth","label","getBBox","textStr","textPxLength","Math","round","type","treeGrid","mapOfPosToGridNode","treeDepth","labels","indentation","wrapGetOffset","proceed","grid","columnsFirst","side","apply","isColumn","columns","reverse","column","getOffset","onAfterGetTitlePosition","e","gridOptions","enabled","axisTitle","axisHeight","horiz","left","axisLeft","offset","opposite","top","axisTop","axisWidth","tickSize","titleWidth","xOption","title","yOption","titleMargin","margin","titleFontSize","renderer","fontMetrics","f","offAxis","bottom","titlePosition","onAfterInit","applyGridOptions","align","categories","showLastLabel","labelRotation","rotation","minTickInterval","columnIndex","columnOptions","isInternal","linkedTo","scrollbar","axes","coll","onAfterRender","firstTick","styledMode","slotWidth","style","css","maxLabelDimensions","rightWall","destroy","isOuterAxis","axisLine","lineWidth","linePath","getLinePath","startPoint","endPoint","distance","tickLength","marginRight","upperBorderEndPoint","upperBorderPath","lowerBorderEndPoint","chartWidth","toPixels","tickmarkOffset","lowerBorderPath","upperBorder","renderBorder","attr","stroke","lineColor","animate","lowerBorder","axisLineExtra","showAxis","render","hasRendered","linkedParent","tickMark","lastTick","hiddenLabels","pop","element","show","hiddenMarks","hide","mark","isLast","onAfterSetAxisTranslation","tickInfo","userLabels","pointRange","dateTimeLabelFormats","unitName","range","count","tickInterval","onAfterSetOptions","gridAxisOptions","className","hour","list","day","week","month","borderWidth","padding","fontSize","text","reserveSpace","textOverflow","units","tickPixelInterval","tickPositioner","parentInfo","unitIdx","unit","counts","unitRange","getTimeTicks","startOfWeek","minPadding","maxPadding","tickWidth","onAfterSetOptions2","onAfterSetScale","setScale","onAfterTickSize","labelPadding","cellHeight","onChartAfterSetChartSize","setAxisSize","onDestroy","keepEvents","onInit","borderColor","tickColor","GridAxisAdditions","onTickAfterGetLabelPosition","reversed","labelOpts","tickPos","nextTickPos","index","crispCorr","right","chartHeight","translate","lblMetrics","useHTML","lines","h","onTickLabelFormat","ctx","pointCopy","isFirst","data","p","is","seriesTypes","gantt","pointClass","setGanttPointAliases","onTrimTicks","categoryAxis","firstPos","secondPos","lastPos","beforeLastPos","linkedMin","linkedMax","startLessThanMin","endMoreThanMin","startLessThanMax","endMoreThanMax","isLinked","startOnTick","endOnTick","wrapUnsquish","args","arguments","Array","parentAxis","thisIndex","lastIndex","inverted","otherAxis","path","extraBorderLine","addClass","add","axisGroup","zIndex","E","timestamp","dateFormat","charAt","W","toParts","firstDay","thursday","firstThursday","makeTime","floor","thursdayTS","toString","extend","Tree_isNumber","Tree_pick","getNode","id","parent","level","mapOfIdToChildren","after","before","node","depth","descendants","end","children","map","child","childStart","NaN","childEnd","milestone","Gantt_Tree","getTree","getListOfParents","ids","listOfParents","reduce","prev","curr","indexOf","adoptedByRoot","orphan","parentExcluded","TreeGridTick_addEvent","removeEvent","TreeGridTick_isObject","TreeGridTick_isNumber","TreeGridTick_pick","TreeGridTick_wrap","onTickInit","TreeGridTickAdditions","wrapGetLabelPosition","labelOptions","step","lbOptions","isTreeGrid","result","symbol","wrapRenderLabel","collapsed","tickGrid","tickOptions","icon","labelIcon","labelElement","axisGrid","axisOptions","symbolOptions","hasDescendants","isTreeGridElement","shouldRender","prefixClassName","prefixLevelClass","removeClass","RegExp","isCollapsed","renderLabelIcon","params","isNew","labelBox","xy","iconCenter","symbols","group","cursor","color","strokeWidth","translateX","translateY","styles","parentGroup","object","attachedTreeGridEvents","textDecoration","onTickHoverExit","toggleCollapse","TickClass","tickProto","collapse","expand","posMappedNodes","external_highcharts_src_js_default_Color_namespaceObject","Color","external_highcharts_src_js_default_Color_default","TreeUtilities_extend","TreeUtilities_isArray","TreeUtilities_isNumber","TreeUtilities_isObject","TreeUtilities_merge","TreeUtilities_pick","relativeLength","getLevelOptions","TreeGridAxis_getLevelOptions","getColor","colorByPoint","colorIndexByPoint","colorIndex","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","chartOptionsChart","colorCount","variateColor","colorVariation","brighten","defaults","converted","levels","item","levelIsConstant","getNodeWidth","columnCount","nodeDistance","nodeWidth","plotSizeX","fraction","parseFloat","nDistance","Number","setTreeValues","tree","idRoot","nodeRoot","mapIdToNode","optionsPoint","childrenTotal","levelDynamic","name","newOptions","isLeaf","updateRootId","rootId","rootNode","TreeGridAxis_addEvent","TreeGridAxis_isArray","splat","TreeGridAxis_find","TreeGridAxis_fireEvent","TreeGridAxis_isObject","isString","TreeGridAxis_merge","TreeGridAxis_pick","TreeGridAxis_removeEvent","TreeGridAxis_wrap","getBreakFromNode","collapseEnd","collapseStart","getTreeGridFromData","uniqueNames","numberOfSeries","collapsedNodes","mapOfIdToNode","uniqueNamesEnabled","posIterator","gridNode","parentNode","parentGridNode","nodes","updateYValuesAndTickPos","setValues","diff","seriesIndex","onBeforeRender","target","some","isDirtyData","seriesHasPrimitivePoints","arr","s","seriesData","firstPoint","foundPrimitivePoint","pointOptions","optionsToObject","hasNames","axisData","toArray","x2","setData","wrapGenerateTick","levelOptions","category","parameters","addLabel","wrapInit","TreeGridAxisAdditions","concat","fontWeight","wrapSetTickInterval","dataMin","dataMax","getTickPositions","linkedParentExtremes","getExtremes","wrapRedraw","ChartClass","axisProps","utils","TreeGridTick","setCollapsedStatus","dataPoint","roundedMin","roundedMax","ceil","G","TreeGridAxis","Chart","Series","Tick","treegrid_src","default"],"mappings":"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"}