{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v12.2.0 (2025-04-07)\n * @module highcharts/indicators/vwap\n * @requires highcharts\n * @requires highcharts/modules/stock\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2025 Paweł Dalek\n *\n * License: www.highcharts.com/license\n */\nimport * as __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__ from \"../highcharts.js\";\nimport * as __WEBPACK_EXTERNAL_MODULE__modules_stock_src_js_b3d80146__ from \"../modules/stock.js\";\n/******/ // The require scope\n/******/ var __webpack_require__ = {};\n/******/ \n/************************************************************************/\n/******/ /* webpack/runtime/compat get default export */\n/******/ (() => {\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = (module) => {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t() => (module['default']) :\n/******/ \t\t\t() => (module);\n/******/ \t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\treturn getter;\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/define property getters */\n/******/ (() => {\n/******/ \t// define getter functions for harmony exports\n/******/ \t__webpack_require__.d = (exports, definition) => {\n/******/ \t\tfor(var key in definition) {\n/******/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/hasOwnProperty shorthand */\n/******/ (() => {\n/******/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ })();\n/******/ \n/************************************************************************/\n\n;// external [\"../highcharts.js\",\"default\"]\nconst external_highcharts_src_js_default_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"];\nvar external_highcharts_src_js_default_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_namespaceObject);\n;// external \"../modules/stock.js\"\nvar x = (y) => {\n\tvar x = {}; __webpack_require__.d(x,\n    \ty); return x\n    } \n    var y = (x) => (() => (x))\n    const stock_src_js_namespaceObject = x({  });\n;// external [\"../highcharts.js\",\"default\",\"SeriesRegistry\"]\nconst external_highcharts_src_js_default_SeriesRegistry_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"].SeriesRegistry;\nvar external_highcharts_src_js_default_SeriesRegistry_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_SeriesRegistry_namespaceObject);\n;// ./code/es-modules/Stock/Indicators/VWAP/VWAPIndicator.js\n/* *\n *\n *  (c) 2010-2025 Paweł Dalek\n *\n *  Volume Weighted Average Price (VWAP) indicator for Highcharts Stock\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { sma: SMAIndicator } = (external_highcharts_src_js_default_SeriesRegistry_default()).seriesTypes;\n\nconst { error, isArray, merge } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Class\n *\n * */\n/**\n * The Volume Weighted Average Price (VWAP) series type.\n *\n * @private\n * @class\n * @name Highcharts.seriesTypes.vwap\n *\n * @augments Highcharts.Series\n */\nclass VWAPIndicator extends SMAIndicator {\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    getValues(series, params) {\n        const indicator = this, chart = series.chart, xValues = series.xData, yValues = series.yData, period = params.period;\n        let isOHLC = true, volumeSeries;\n        // Checks if volume series exists\n        if (!(volumeSeries = (chart.get(params.volumeSeriesID)))) {\n            error('Series ' +\n                params.volumeSeriesID +\n                ' not found! Check `volumeSeriesID`.', true, chart);\n            return;\n        }\n        // Checks if series data fits the OHLC format\n        if (!(isArray(yValues[0]))) {\n            isOHLC = false;\n        }\n        return indicator.calculateVWAPValues(isOHLC, xValues, yValues, volumeSeries, period);\n    }\n    /**\n     * Main algorithm used to calculate Volume Weighted Average Price (VWAP)\n     * values\n     *\n     * @private\n     *\n     * @param {boolean} isOHLC\n     * Says if data has OHLC format\n     *\n     * @param {Array<number>} xValues\n     * Array of timestamps\n     *\n     * @param {Array<number|Array<number,number,number,number>>} yValues\n     * Array of yValues, can be an array of a four arrays (OHLC) or array of\n     * values (line)\n     *\n     * @param {Array<*>} volumeSeries\n     * Volume series\n     *\n     * @param {number} period\n     * Number of points to be calculated\n     *\n     * @return {Object}\n     * Object contains computed VWAP\n     **/\n    calculateVWAPValues(isOHLC, xValues, yValues, volumeSeries, period) {\n        const volumeValues = volumeSeries.getColumn('y'), volumeLength = volumeValues.length, pointsLength = xValues.length, cumulativePrice = [], cumulativeVolume = [], xData = [], yData = [], VWAP = [];\n        let commonLength, typicalPrice, cPrice, cVolume, i, j;\n        if (pointsLength <= volumeLength) {\n            commonLength = pointsLength;\n        }\n        else {\n            commonLength = volumeLength;\n        }\n        for (i = 0, j = 0; i < commonLength; i++) {\n            // Depending on whether series is OHLC or line type, price is\n            // average of the high, low and close or a simple value\n            typicalPrice = isOHLC ?\n                ((yValues[i][1] + yValues[i][2] +\n                    yValues[i][3]) / 3) :\n                yValues[i];\n            typicalPrice *= volumeValues[i];\n            cPrice = j ?\n                (cumulativePrice[i - 1] + typicalPrice) :\n                typicalPrice;\n            cVolume = j ?\n                (cumulativeVolume[i - 1] + volumeValues[i]) :\n                volumeValues[i];\n            cumulativePrice.push(cPrice);\n            cumulativeVolume.push(cVolume);\n            VWAP.push([xValues[i], (cPrice / cVolume)]);\n            xData.push(VWAP[i][0]);\n            yData.push(VWAP[i][1]);\n            j++;\n            if (j === period) {\n                j = 0;\n            }\n        }\n        return {\n            values: VWAP,\n            xData: xData,\n            yData: yData\n        };\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Volume Weighted Average Price indicator.\n *\n * This series requires `linkedTo` option to be set.\n *\n * @sample stock/indicators/vwap\n *         Volume Weighted Average Price indicator\n *\n * @extends      plotOptions.sma\n * @since        6.0.0\n * @product      highstock\n * @requires     stock/indicators/indicators\n * @requires     stock/indicators/vwap\n * @optionparent plotOptions.vwap\n */\nVWAPIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n    /**\n     * @excluding index\n     */\n    params: {\n        index: void 0, // Unchangeable index, do not inherit (#15362)\n        period: 30,\n        /**\n         * The id of volume series which is mandatory. For example using\n         * OHLC data, volumeSeriesID='volume' means the indicator will be\n         * calculated using OHLC and volume values.\n         */\n        volumeSeriesID: 'volume'\n    }\n});\nexternal_highcharts_src_js_default_SeriesRegistry_default().registerSeriesType('vwap', VWAPIndicator);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const VWAP_VWAPIndicator = ((/* unused pure expression or super */ null && (VWAPIndicator)));\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A `Volume Weighted Average Price (VWAP)` series. If the\n * [type](#series.vwap.type) option is not specified, it is inherited from\n * [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.vwap\n * @since     6.0.0\n * @product   highstock\n * @excluding dataParser, dataURL\n * @requires  stock/indicators/indicators\n * @requires  stock/indicators/vwap\n * @apioption series.vwap\n */\n''; // To include the above in the js output\n\n;// ./code/es-modules/masters/indicators/vwap.js\n\n\n\n\n\n/* harmony default export */ const vwap_src = ((external_highcharts_src_js_default_default()));\n\nexport { vwap_src as default };\n"],"names":["__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__","__webpack_require__","n","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","external_highcharts_src_js_default_namespaceObject","external_highcharts_src_js_default_default","external_highcharts_src_js_default_SeriesRegistry_namespaceObject","SeriesRegistry","external_highcharts_src_js_default_SeriesRegistry_default","sma","SMAIndicator","seriesTypes","error","isArray","merge","VWAPIndicator","getValues","series","params","chart","xValues","xData","yValues","yData","period","isOHLC","volumeSeries","volumeSeriesID","indicator","calculateVWAPValues","commonLength","typicalPrice","cPrice","cVolume","i","j","volumeValues","getColumn","volumeLength","length","pointsLength","cumulativePrice","cumulativeVolume","VWAP","push","values","defaultOptions","index","registerSeriesType","vwap_src","default"],"mappings":"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"}