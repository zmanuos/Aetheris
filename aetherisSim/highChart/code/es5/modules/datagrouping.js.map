{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v12.2.0 (2025-04-07)\n * @module highcharts/modules/datagrouping\n * @requires highcharts\n *\n * Data grouping module\n *\n * (c) 2010-2025 Torstein HÃ¸nsi\n *\n * License: www.highcharts.com/license\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"highcharts\"), require(\"highcharts\")[\"SeriesRegistry\"], require(\"highcharts\")[\"Templating\"]);\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"highcharts/modules/datagrouping\", [[\"highcharts/highcharts\"], [\"highcharts/highcharts\",\"SeriesRegistry\"], [\"highcharts/highcharts\",\"Templating\"]], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"highcharts/modules/datagrouping\"] = factory(require(\"highcharts\"), require(\"highcharts\")[\"SeriesRegistry\"], require(\"highcharts\")[\"Templating\"]);\n\telse\n\t\troot[\"Highcharts\"] = factory(root[\"Highcharts\"], root[\"Highcharts\"][\"SeriesRegistry\"], root[\"Highcharts\"][\"Templating\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__944__, __WEBPACK_EXTERNAL_MODULE__512__, __WEBPACK_EXTERNAL_MODULE__984__) {\nreturn /******/ (function() { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 512:\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__512__;\n\n/***/ }),\n\n/***/ 944:\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__944__;\n\n/***/ }),\n\n/***/ 984:\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__984__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t!function() {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__webpack_require__.n = function(module) {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\tfunction() { return module['default']; } :\n/******/ \t\t\t\tfunction() { return module; };\n/******/ \t\t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t!function() {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = function(exports, definition) {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t!function() {\n/******/ \t\t__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }\n/******/ \t}();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ datagrouping_src; }\n});\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\"],\"commonjs\":[\"highcharts\"],\"commonjs2\":[\"highcharts\"],\"root\":[\"Highcharts\"]}\nvar highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_ = __webpack_require__(944);\nvar highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default = /*#__PURE__*/__webpack_require__.n(highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_);\n;// ./code/es5/es-modules/Extensions/DataGrouping/ApproximationRegistry.js\n/* *\n *\n *  (c) 2010-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Constants\n *\n * */\n/**\n * Define the available approximation types. The data grouping\n * approximations takes an array or numbers as the first parameter. In case\n * of ohlc, four arrays are sent in as four parameters. Each array consists\n * only of numbers. In case null values belong to the group, the property\n * .hasNulls will be set to true on the array.\n *\n * @product highstock\n *\n * @private\n */\nvar ApproximationRegistry = {\n// Approximations added programmatically\n};\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ var DataGrouping_ApproximationRegistry = (ApproximationRegistry);\n\n;// ./code/es5/es-modules/Extensions/DataGrouping/ApproximationDefaults.js\n/* *\n *\n *  (c) 2010-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nvar arrayMax = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).arrayMax, arrayMin = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).arrayMin, correctFloat = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).correctFloat, extend = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).extend, isNumber = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).isNumber;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction average(arr) {\n    var len = arr.length;\n    var ret = sum(arr);\n    // If we have a number, return it divided by the length. If not,\n    // return null or undefined based on what the sum method finds.\n    if (isNumber(ret) && len) {\n        ret = correctFloat(ret / len);\n    }\n    return ret;\n}\n/**\n * The same as average, but for series with multiple values, like area ranges.\n * @private\n */\nfunction averages() {\n    var ret = [];\n    [].forEach.call(arguments, function (arr) {\n        ret.push(average(arr));\n    });\n    // Return undefined when first elem. is undefined and let\n    // sum method handle null (#7377)\n    return typeof ret[0] === 'undefined' ? void 0 : ret;\n}\n/**\n * @private\n */\nfunction ApproximationDefaults_close(arr) {\n    return arr.length ?\n        arr[arr.length - 1] :\n        (arr.hasNulls ? null : void 0);\n}\n/**\n * @private\n */\nfunction high(arr) {\n    return arr.length ?\n        arrayMax(arr) :\n        (arr.hasNulls ? null : void 0);\n}\n/**\n * HLC, OHLC and range are special cases where a multidimensional array is input\n * and an array is output.\n * @private\n */\nfunction hlc(high, low, close) {\n    high = DataGrouping_ApproximationRegistry.high(high);\n    low = DataGrouping_ApproximationRegistry.low(low);\n    close = DataGrouping_ApproximationRegistry.close(close);\n    if (isNumber(high) ||\n        isNumber(low) ||\n        isNumber(close)) {\n        return [high, low, close];\n    }\n}\n/**\n * @private\n */\nfunction low(arr) {\n    return arr.length ?\n        arrayMin(arr) :\n        (arr.hasNulls ? null : void 0);\n}\n/**\n * @private\n */\nfunction ohlc(open, high, low, close) {\n    open = DataGrouping_ApproximationRegistry.open(open);\n    high = DataGrouping_ApproximationRegistry.high(high);\n    low = DataGrouping_ApproximationRegistry.low(low);\n    close = DataGrouping_ApproximationRegistry.close(close);\n    if (isNumber(open) ||\n        isNumber(high) ||\n        isNumber(low) ||\n        isNumber(close)) {\n        return [open, high, low, close];\n    }\n}\n/**\n * @private\n */\nfunction ApproximationDefaults_open(arr) {\n    return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n}\n/**\n * @private\n */\nfunction range(low, high) {\n    low = DataGrouping_ApproximationRegistry.low(low);\n    high = DataGrouping_ApproximationRegistry.high(high);\n    if (isNumber(low) || isNumber(high)) {\n        return [low, high];\n    }\n    if (low === null && high === null) {\n        return null;\n    }\n    // Else, return is undefined\n}\n/**\n * @private\n */\nfunction sum(arr) {\n    var len = arr.length,\n        ret;\n    // 1. it consists of nulls exclusive\n    if (!len && arr.hasNulls) {\n        ret = null;\n        // 2. it has a length and real values\n    }\n    else if (len) {\n        ret = 0;\n        while (len--) {\n            ret += arr[len];\n        }\n    }\n    // 3. it has zero length, so just return undefined\n    // => doNothing()\n    return ret;\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar ApproximationDefaults = {\n    average: average,\n    averages: averages,\n    close: ApproximationDefaults_close,\n    high: high,\n    hlc: hlc,\n    low: low,\n    ohlc: ohlc,\n    open: ApproximationDefaults_open,\n    range: range,\n    sum: sum\n};\nextend(DataGrouping_ApproximationRegistry, ApproximationDefaults);\n/* harmony default export */ var DataGrouping_ApproximationDefaults = (ApproximationDefaults);\n\n;// ./code/es5/es-modules/Extensions/DataGrouping/DataGroupingDefaults.js\n/* *\n *\n *  (c) 2010-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Constants\n *\n * */\n/**\n * Common options\n * @private\n */\nvar common = {\n    /// enabled: null, // (true for stock charts, false for basic),\n    // forced: undefined,\n    groupPixelWidth: 2,\n    // The first one is the point or start value, the second is the start\n    // value if we're dealing with range, the third one is the end value if\n    // dealing with a range\n    dateTimeLabelFormats: {\n        millisecond: [\n            '%[AebHMSL]',\n            '%[AebHMSL]',\n            '-%[HMSL]'\n        ],\n        second: [\n            '%[AebHMS]',\n            '%[AebHMS]',\n            '-%[HMS]'\n        ],\n        minute: [\n            '%[AebHM]',\n            '%[AebHM]',\n            '-%[HM]'\n        ],\n        hour: [\n            '%[AebHM]',\n            '%[AebHM]',\n            '-%[HM]'\n        ],\n        day: [\n            '%[AebY]',\n            '%[Aeb]',\n            '-%[AebY]'\n        ],\n        week: [\n            '%v %[AebY]',\n            '%[Aeb]',\n            '-%[AebY]'\n        ],\n        month: [\n            '%[BY]',\n            '%[B]',\n            '-%[BY]'\n        ],\n        year: [\n            '%Y',\n            '%Y',\n            '-%Y'\n        ]\n    }\n    /// smoothed = false, // enable this for navigator series only\n};\n/**\n * Extends common options\n * @private\n */\nvar seriesSpecific = {\n    line: {},\n    spline: {},\n    area: {},\n    areaspline: {},\n    arearange: {},\n    column: {\n        groupPixelWidth: 10\n    },\n    columnrange: {\n        groupPixelWidth: 10\n    },\n    candlestick: {\n        groupPixelWidth: 10\n    },\n    ohlc: {\n        groupPixelWidth: 5\n    },\n    hlc: {\n        groupPixelWidth: 5\n        // Move to HeikinAshiSeries.ts after refactoring data grouping.\n    },\n    heikinashi: {\n        groupPixelWidth: 10\n    }\n};\n/**\n * Units are defined in a separate array to allow complete overriding in\n * case of a user option.\n * @private\n */\nvar units = [\n    [\n        'millisecond', // Unit name\n        [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // Allowed multiples\n    ], [\n        'second',\n        [1, 2, 5, 10, 15, 30]\n    ], [\n        'minute',\n        [1, 2, 5, 10, 15, 30]\n    ], [\n        'hour',\n        [1, 2, 3, 4, 6, 8, 12]\n    ], [\n        'day',\n        [1]\n    ], [\n        'week',\n        [1]\n    ], [\n        'month',\n        [1, 3, 6]\n    ], [\n        'year',\n        null\n    ]\n];\n/* *\n *\n *  Default Export\n *\n * */\nvar DataGroupingDefaults = {\n    common: common,\n    seriesSpecific: seriesSpecific,\n    units: units\n};\n/* harmony default export */ var DataGrouping_DataGroupingDefaults = (DataGroupingDefaults);\n\n;// ./code/es5/es-modules/Extensions/DataGrouping/DataGroupingAxisComposition.js\n/* *\n *\n *  (c) 2010-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nvar addEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).addEvent, DataGroupingAxisComposition_extend = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).extend, merge = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).merge, pick = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).pick;\n/* *\n *\n *  Variables\n *\n * */\nvar AxisConstructor;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Check the groupPixelWidth and apply the grouping if needed.\n * Fired only after processing the data.\n *\n * @product highstock\n *\n * @function Highcharts.Axis#applyGrouping\n */\nfunction applyGrouping(e) {\n    var axis = this,\n        series = axis.series;\n    // Reset the groupPixelWidth for all series, #17141.\n    series.forEach(function (series) {\n        series.groupPixelWidth = void 0; // #2110\n    });\n    series.forEach(function (series) {\n        series.groupPixelWidth = (axis.getGroupPixelWidth &&\n            axis.getGroupPixelWidth());\n        if (series.groupPixelWidth) {\n            series.hasProcessed = true; // #2692\n        }\n        // Fire independing on series.groupPixelWidth to always set a proper\n        // dataGrouping state, (#16238)\n        series.applyGrouping(!!e.hasExtremesChanged);\n    });\n}\n/**\n * @private\n */\nfunction compose(AxisClass) {\n    AxisConstructor = AxisClass;\n    var axisProto = AxisClass.prototype;\n    if (!axisProto.applyGrouping) {\n        addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n        // When all series are processed, calculate the group pixel width and\n        // then if this value is different than zero apply groupings.\n        addEvent(AxisClass, 'postProcessData', applyGrouping);\n        DataGroupingAxisComposition_extend(axisProto, {\n            applyGrouping: applyGrouping,\n            getGroupPixelWidth: getGroupPixelWidth,\n            setDataGrouping: setDataGrouping\n        });\n    }\n}\n/**\n * Get the data grouping pixel width based on the greatest defined individual\n * width of the axis' series, and if whether one of the axes need grouping.\n * @private\n */\nfunction getGroupPixelWidth() {\n    var series = this.series;\n    var i = series.length,\n        groupPixelWidth = 0,\n        doGrouping = false,\n        dataLength,\n        dgOptions;\n    // If one of the series needs grouping, apply it to all (#1634)\n    while (i--) {\n        dgOptions = series[i].options.dataGrouping;\n        if (dgOptions) { // #2692\n            // If multiple series are compared on the same x axis, give them the\n            // same group pixel width (#334)\n            groupPixelWidth = Math.max(groupPixelWidth, \n            // Fallback to commonOptions (#9693)\n            pick(dgOptions.groupPixelWidth, DataGrouping_DataGroupingDefaults.common.groupPixelWidth));\n            dataLength = (series[i].dataTable.modified ||\n                series[i].dataTable).rowCount;\n            // Execute grouping if the amount of points is greater than the\n            // limit defined in groupPixelWidth\n            if (series[i].groupPixelWidth ||\n                (dataLength >\n                    (this.chart.plotSizeX / groupPixelWidth)) ||\n                (dataLength && dgOptions.forced)) {\n                doGrouping = true;\n            }\n        }\n    }\n    return doGrouping ? groupPixelWidth : 0;\n}\n/**\n * When resetting the scale reset the hasProcessed flag to avoid taking\n * previous data grouping of neighbour series into account when determining\n * group pixel width (#2692).\n * @private\n */\nfunction onAfterSetScale() {\n    this.series.forEach(function (series) {\n        series.hasProcessed = false;\n    });\n}\n/**\n * Highcharts Stock only. Force data grouping on all the axis' series.\n *\n * @product highstock\n *\n * @function Highcharts.Axis#setDataGrouping\n *\n * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n *        A `dataGrouping` configuration. Use `false` to disable data grouping\n *        dynamically.\n *\n * @param {boolean} [redraw=true]\n *        Whether to redraw the chart or wait for a later call to\n *        {@link Chart#redraw}.\n */\nfunction setDataGrouping(dataGrouping, redraw) {\n    var axis = this;\n    var i;\n    redraw = pick(redraw, true);\n    if (!dataGrouping) {\n        dataGrouping = {\n            forced: false,\n            units: null\n        };\n    }\n    // Axis is instantiated, update all series\n    if (this instanceof AxisConstructor) {\n        i = this.series.length;\n        while (i--) {\n            this.series[i].update({\n                dataGrouping: dataGrouping\n            }, false);\n        }\n        // Axis not yet instantiated, alter series options\n    }\n    else {\n        this.chart.options.series.forEach(function (seriesOptions) {\n            // Merging dataGrouping options with already defined options #16759\n            seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                dataGrouping :\n                merge(dataGrouping, seriesOptions.dataGrouping);\n        });\n    }\n    // Clear ordinal slope, so we won't accidentally use the old one (#7827)\n    if (axis.ordinal) {\n        axis.ordinal.slope = void 0;\n    }\n    if (redraw) {\n        this.chart.redraw();\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar DataGroupingAxisComposition = {\n    compose: compose\n};\n/* harmony default export */ var DataGrouping_DataGroupingAxisComposition = (DataGroupingAxisComposition);\n\n;// ./code/es5/es-modules/Data/ColumnUtils.js\n/* *\n *\n *  (c) 2020-2025 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *\n * */\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * Utility functions for columns that can be either arrays or typed arrays.\n * @private\n */\nvar ColumnUtils;\n(function (ColumnUtils) {\n    /* *\n    *\n    *  Declarations\n    *\n    * */\n    /* *\n    *\n    * Functions\n    *\n    * */\n    /**\n     * Sets the length of the column array.\n     *\n     * @param {DataTable.Column} column\n     * Column to be modified.\n     *\n     * @param {number} length\n     * New length of the column.\n     *\n     * @param {boolean} asSubarray\n     * If column is a typed array, return a subarray instead of a new array. It\n     * is faster `O(1)`, but the entire buffer will be kept in memory until all\n     * views to it are destroyed. Default is `false`.\n     *\n     * @return {DataTable.Column}\n     * Modified column.\n     *\n     * @private\n     */\n    function setLength(column, length, asSubarray) {\n        if (Array.isArray(column)) {\n            column.length = length;\n            return column;\n        }\n        return column[asSubarray ? 'subarray' : 'slice'](0, length);\n    }\n    ColumnUtils.setLength = setLength;\n    /**\n     * Splices a column array.\n     *\n     * @param {DataTable.Column} column\n     * Column to be modified.\n     *\n     * @param {number} start\n     * Index at which to start changing the array.\n     *\n     * @param {number} deleteCount\n     * An integer indicating the number of old array elements to remove.\n     *\n     * @param {boolean} removedAsSubarray\n     * If column is a typed array, return a subarray instead of a new array. It\n     * is faster `O(1)`, but the entire buffer will be kept in memory until all\n     * views to it are destroyed. Default is `true`.\n     *\n     * @param {Array<number>|TypedArray} items\n     * The elements to add to the array, beginning at the start index. If you\n     * don't specify any elements, `splice()` will only remove elements from the\n     * array.\n     *\n     * @return {SpliceResult}\n     * Object containing removed elements and the modified column.\n     *\n     * @private\n     */\n    function splice(column, start, deleteCount, removedAsSubarray, items) {\n        if (items === void 0) { items = []; }\n        if (Array.isArray(column)) {\n            if (!Array.isArray(items)) {\n                items = Array.from(items);\n            }\n            return {\n                removed: column.splice.apply(column, __spreadArray([start, deleteCount], items, false)),\n                array: column\n            };\n        }\n        var Constructor = Object.getPrototypeOf(column)\n                .constructor;\n        var removed = column[removedAsSubarray ? 'subarray' : 'slice'](start,\n            start + deleteCount);\n        var newLength = column.length - deleteCount + items.length;\n        var result = new Constructor(newLength);\n        result.set(column.subarray(0, start), 0);\n        result.set(items, start);\n        result.set(column.subarray(start + deleteCount), start + items.length);\n        return {\n            removed: removed,\n            array: result\n        };\n    }\n    ColumnUtils.splice = splice;\n})(ColumnUtils || (ColumnUtils = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ var Data_ColumnUtils = (ColumnUtils);\n\n;// ./code/es5/es-modules/Data/DataTableCore.js\n/* *\n *\n *  (c) 2009-2025 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - GÃ¸ran Slettemark\n *  - Torstein HÃ¸nsi\n *\n * */\n\n\nvar setLength = Data_ColumnUtils.setLength, splice = Data_ColumnUtils.splice;\n\nvar fireEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).fireEvent, objectEach = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).objectEach, uniqueKey = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).uniqueKey;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class to manage columns and rows in a table structure. It provides methods\n * to add, remove, and manipulate columns and rows, as well as to retrieve data\n * from specific cells.\n *\n * @class\n * @name Highcharts.DataTable\n *\n * @param {Highcharts.DataTableOptions} [options]\n * Options to initialize the new DataTable instance.\n */\nvar DataTableCore = /** @class */ (function () {\n    /**\n     * Constructs an instance of the DataTable class.\n     *\n     * @example\n     * const dataTable = new Highcharts.DataTableCore({\n     *   columns: {\n     *     year: [2020, 2021, 2022, 2023],\n     *     cost: [11, 13, 12, 14],\n     *     revenue: [12, 15, 14, 18]\n     *   }\n     * });\n\n     *\n     * @param {Highcharts.DataTableOptions} [options]\n     * Options to initialize the new DataTable instance.\n     */\n    function DataTableCore(options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        /**\n         * Whether the ID was automatic generated or given in the constructor.\n         *\n         * @name Highcharts.DataTable#autoId\n         * @type {boolean}\n         */\n        this.autoId = !options.id;\n        this.columns = {};\n        /**\n         * ID of the table for identification purposes.\n         *\n         * @name Highcharts.DataTable#id\n         * @type {string}\n         */\n        this.id = (options.id || uniqueKey());\n        this.modified = this;\n        this.rowCount = 0;\n        this.versionTag = uniqueKey();\n        var rowCount = 0;\n        objectEach(options.columns || {}, function (column, columnName) {\n            _this.columns[columnName] = column.slice();\n            rowCount = Math.max(rowCount, column.length);\n        });\n        this.applyRowCount(rowCount);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Applies a row count to the table by setting the `rowCount` property and\n     * adjusting the length of all columns.\n     *\n     * @private\n     * @param {number} rowCount The new row count.\n     */\n    DataTableCore.prototype.applyRowCount = function (rowCount) {\n        var _this = this;\n        this.rowCount = rowCount;\n        objectEach(this.columns, function (column, columnName) {\n            if (column.length !== rowCount) {\n                _this.columns[columnName] = setLength(column, rowCount);\n            }\n        });\n    };\n    /**\n     * Delete rows. Simplified version of the full\n     * `DataTable.deleteRows` method.\n     *\n     * @param {number} rowIndex\n     * The start row index\n     *\n     * @param {number} [rowCount=1]\n     * The number of rows to delete\n     *\n     * @return {void}\n     *\n     * @emits #afterDeleteRows\n     */\n    DataTableCore.prototype.deleteRows = function (rowIndex, rowCount) {\n        var _this = this;\n        if (rowCount === void 0) { rowCount = 1; }\n        if (rowCount > 0 && rowIndex < this.rowCount) {\n            var length_1 = 0;\n            objectEach(this.columns, function (column, columnName) {\n                _this.columns[columnName] =\n                    splice(column, rowIndex, rowCount).array;\n                length_1 = column.length;\n            });\n            this.rowCount = length_1;\n        }\n        fireEvent(this, 'afterDeleteRows', { rowIndex: rowIndex, rowCount: rowCount });\n        this.versionTag = uniqueKey();\n    };\n    /**\n     * Fetches the given column by the canonical column name. Simplified version\n     * of the full `DataTable.getRow` method, always returning by reference.\n     *\n     * @param {string} columnName\n     * Name of the column to get.\n     *\n     * @return {Highcharts.DataTableColumn|undefined}\n     * A copy of the column, or `undefined` if not found.\n     */\n    DataTableCore.prototype.getColumn = function (columnName, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    asReference) {\n        return this.columns[columnName];\n    };\n    /**\n     * Retrieves all or the given columns. Simplified version of the full\n     * `DataTable.getColumns` method, always returning by reference.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @return {Highcharts.DataTableColumnCollection}\n     * Collection of columns. If a requested column was not found, it is\n     * `undefined`.\n     */\n    DataTableCore.prototype.getColumns = function (columnNames, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    asReference) {\n        var _this = this;\n        return (columnNames || Object.keys(this.columns)).reduce(function (columns, columnName) {\n            columns[columnName] = _this.columns[columnName];\n            return columns;\n        }, {});\n    };\n    /**\n     * Retrieves the row at a given index.\n     *\n     * @param {number} rowIndex\n     * Row index to retrieve. First row has index 0.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @return {Record<string, number|string|undefined>|undefined}\n     * Returns the row values, or `undefined` if not found.\n     */\n    DataTableCore.prototype.getRow = function (rowIndex, columnNames) {\n        var _this = this;\n        return (columnNames || Object.keys(this.columns)).map(function (key) { var _a; return (_a = _this.columns[key]) === null || _a === void 0 ? void 0 : _a[rowIndex]; });\n    };\n    /**\n     * Sets cell values for a column. Will insert a new column, if not found.\n     *\n     * @param {string} columnName\n     * Column name to set.\n     *\n     * @param {Highcharts.DataTableColumn} [column]\n     * Values to set in the column.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to change. (Default: 0)\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns\n     */\n    DataTableCore.prototype.setColumn = function (columnName, column, rowIndex, eventDetail) {\n        var _a;\n        if (column === void 0) { column = []; }\n        if (rowIndex === void 0) { rowIndex = 0; }\n        this.setColumns((_a = {}, _a[columnName] = column, _a), rowIndex, eventDetail);\n    };\n    /**\n     * Sets cell values for multiple columns. Will insert new columns, if not\n     * found. Simplified version of the full `DataTableCore.setColumns`, limited\n     * to full replacement of the columns (undefined `rowIndex`).\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to change. Ignored in the `DataTableCore`, as it\n     * always replaces the full column.\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns\n     */\n    DataTableCore.prototype.setColumns = function (columns, rowIndex, eventDetail) {\n        var _this = this;\n        var rowCount = this.rowCount;\n        objectEach(columns, function (column, columnName) {\n            _this.columns[columnName] = column.slice();\n            rowCount = column.length;\n        });\n        this.applyRowCount(rowCount);\n        if (!(eventDetail === null || eventDetail === void 0 ? void 0 : eventDetail.silent)) {\n            fireEvent(this, 'afterSetColumns');\n            this.versionTag = uniqueKey();\n        }\n    };\n    /**\n     * Sets cell values of a row. Will insert a new row if no index was\n     * provided, or if the index is higher than the total number of table rows.\n     * A simplified version of the full `DateTable.setRow`, limited to objects.\n     *\n     * @param {Record<string, number|string|undefined>} row\n     * Cell values to set.\n     *\n     * @param {number} [rowIndex]\n     * Index of the row to set. Leave `undefined` to add as a new row.\n     *\n     * @param {boolean} [insert]\n     * Whether to insert the row at the given index, or to overwrite the row.\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #afterSetRows\n     */\n    DataTableCore.prototype.setRow = function (row, rowIndex, insert, eventDetail) {\n        if (rowIndex === void 0) { rowIndex = this.rowCount; }\n        var columns = this.columns,\n            indexRowCount = insert ? this.rowCount + 1 : rowIndex + 1;\n        objectEach(row, function (cellValue, columnName) {\n            var column = columns[columnName] ||\n                    (eventDetail === null || eventDetail === void 0 ? void 0 : eventDetail.addColumns) !== false && new Array(indexRowCount);\n            if (column) {\n                if (insert) {\n                    column = splice(column, rowIndex, 0, true, [cellValue]).array;\n                }\n                else {\n                    column[rowIndex] = cellValue;\n                }\n                columns[columnName] = column;\n            }\n        });\n        if (indexRowCount > this.rowCount) {\n            this.applyRowCount(indexRowCount);\n        }\n        if (!(eventDetail === null || eventDetail === void 0 ? void 0 : eventDetail.silent)) {\n            fireEvent(this, 'afterSetRows');\n            this.versionTag = uniqueKey();\n        }\n    };\n    return DataTableCore;\n}());\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ var Data_DataTableCore = (DataTableCore);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * A typed array.\n * @typedef {Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} Highcharts.TypedArray\n * //**\n * A column of values in a data table.\n * @typedef {Array<boolean|null|number|string|undefined>|Highcharts.TypedArray} Highcharts.DataTableColumn\n */ /**\n* A collection of data table columns defined by a object where the key is the\n* column name and the value is an array of the column values.\n* @typedef {Record<string, Highcharts.DataTableColumn>} Highcharts.DataTableColumnCollection\n*/\n/**\n * Options for the `DataTable` or `DataTableCore` classes.\n * @interface Highcharts.DataTableOptions\n */ /**\n* The column options for the data table. The columns are defined by an object\n* where the key is the column ID and the value is an array of the column\n* values.\n*\n* @name Highcharts.DataTableOptions.columns\n* @type {Highcharts.DataTableColumnCollection|undefined}\n*/ /**\n* Custom ID to identify the new DataTable instance.\n*\n* @name Highcharts.DataTableOptions.id\n* @type {string|undefined}\n*/\n(''); // Keeps doclets above in JS file\n\n;// ./code/es5/es-modules/Core/Axis/DateTimeAxis.js\n/* *\n *\n *  (c) 2010-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nvar DateTimeAxis_addEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).addEvent, getMagnitude = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).getMagnitude, normalizeTickInterval = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).normalizeTickInterval, timeUnits = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).timeUnits;\n/* *\n *\n *  Composition\n *\n * */\n/* eslint-disable valid-jsdoc */\nvar DateTimeAxis;\n(function (DateTimeAxis) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Extends axis class with date and time support.\n     * @private\n     */\n    function compose(AxisClass) {\n        if (!AxisClass.keepProps.includes('dateTime')) {\n            AxisClass.keepProps.push('dateTime');\n            var axisProto = AxisClass.prototype;\n            axisProto.getTimeTicks = getTimeTicks;\n            DateTimeAxis_addEvent(AxisClass, 'afterSetType', onAfterSetType);\n        }\n        return AxisClass;\n    }\n    DateTimeAxis.compose = compose;\n    /**\n     * Set the tick positions to a time unit that makes sense, for example\n     * on the first of each month or on every Monday. Return an array with\n     * the time positions. Used in datetime axes as well as for grouping\n     * data on a datetime axis.\n     *\n     * @private\n     * @function Highcharts.Axis#getTimeTicks\n     * @param {Highcharts.TimeNormalizeObject} normalizedInterval\n     * The interval in axis values (ms) and the count.\n     * @param {number} min\n     * The minimum in axis values.\n     * @param {number} max\n     * The maximum in axis values.\n     */\n    function getTimeTicks() {\n        return this.chart.time.getTimeTicks.apply(this.chart.time, arguments);\n    }\n    /**\n     * @private\n     */\n    function onAfterSetType() {\n        if (this.type !== 'datetime') {\n            this.dateTime = void 0;\n            return;\n        }\n        if (!this.dateTime) {\n            this.dateTime = new Additions(this);\n        }\n    }\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    var Additions = /** @class */ (function () {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            function Additions(axis) {\n                this.axis = axis;\n        }\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get a normalized tick interval for dates. Returns a configuration\n         * object with unit range (interval), count and name. Used to prepare\n         * data for `getTimeTicks`. Previously this logic was part of\n         * getTimeTicks, but as `getTimeTicks` now runs of segments in stock\n         * charts, the normalizing logic was extracted in order to prevent it\n         * for running over again for each segment having the same interval.\n         * #662, #697.\n         * @private\n         */\n        Additions.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {\n            var units = (unitsOption || [[\n                        // Unit name\n                        'millisecond',\n                        // Allowed multiples\n                        [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]\n                    ],\n                [\n                        'second',\n                        [1, 2, 5, 10, 15, 30]\n                    ],\n                [\n                        'minute',\n                        [1, 2, 5, 10, 15, 30]\n                    ],\n                [\n                        'hour',\n                        [1, 2, 3, 4, 6, 8, 12]\n                    ],\n                [\n                        'day',\n                        [1, 2]\n                    ],\n                [\n                        'week',\n                        [1, 2]\n                    ],\n                [\n                        'month',\n                        [1, 2, 3, 4, 6]\n                    ],\n                [\n                        'year',\n                        null\n                    ]]);\n            var unit = units[units.length - 1], // Default unit is years\n                interval = timeUnits[unit[0]],\n                multiples = unit[1],\n                i;\n            // Loop through the units to find the one that best fits the\n            // tickInterval\n            for (i = 0; i < units.length; i++) {\n                unit = units[i];\n                interval = timeUnits[unit[0]];\n                multiples = unit[1];\n                if (units[i + 1]) {\n                    // `lessThan` is in the middle between the highest multiple\n                    // and the next unit.\n                    var lessThan = (interval *\n                            multiples[multiples.length - 1] +\n                            timeUnits[units[i + 1][0]]) / 2;\n                    // Break and keep the current unit\n                    if (tickInterval <= lessThan) {\n                        break;\n                    }\n                }\n            }\n            // Prevent 2.5 years intervals, though 25, 250 etc. are allowed\n            if (interval === timeUnits.year && tickInterval < 5 * interval) {\n                multiples = [1, 2, 5];\n            }\n            // Get the count\n            var count = normalizeTickInterval(tickInterval / interval, multiples, unit[0] === 'year' ? // #1913, #2360\n                    Math.max(getMagnitude(tickInterval / interval), 1) :\n                    1);\n            return {\n                unitRange: interval,\n                count: count,\n                unitName: unit[0]\n            };\n        };\n        /**\n         * Get the best date format for a specific X value based on the closest\n         * point range on the axis.\n         *\n         * @private\n         */\n        Additions.prototype.getXDateFormat = function (x, dateTimeLabelFormats) {\n            var axis = this.axis,\n                time = axis.chart.time;\n            return axis.closestPointRange ?\n                time.getDateFormat(axis.closestPointRange, x, axis.options.startOfWeek, dateTimeLabelFormats) ||\n                    // #2546, 2581\n                    time.resolveDTLFormat(dateTimeLabelFormats.year).main :\n                time.resolveDTLFormat(dateTimeLabelFormats.day).main;\n        };\n        return Additions;\n    }());\n    DateTimeAxis.Additions = Additions;\n})(DateTimeAxis || (DateTimeAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ var Axis_DateTimeAxis = (DateTimeAxis);\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"SeriesRegistry\"],\"commonjs\":[\"highcharts\",\"SeriesRegistry\"],\"commonjs2\":[\"highcharts\",\"SeriesRegistry\"],\"root\":[\"Highcharts\",\"SeriesRegistry\"]}\nvar highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_ = __webpack_require__(512);\nvar highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default = /*#__PURE__*/__webpack_require__.n(highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_);\n;// ./code/es5/es-modules/Extensions/DataGrouping/DataGroupingSeriesComposition.js\n/* *\n *\n *  (c) 2010-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\n\n\n\n\nvar seriesProto = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).series.prototype;\n\nvar DataGroupingSeriesComposition_addEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).addEvent, defined = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).defined, error = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).error, DataGroupingSeriesComposition_extend = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).extend, DataGroupingSeriesComposition_isNumber = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).isNumber, DataGroupingSeriesComposition_merge = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).merge, DataGroupingSeriesComposition_pick = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).pick, splat = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).splat;\n/* *\n *\n *  Constants\n *\n * */\nvar baseGeneratePoints = seriesProto.generatePoints;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction adjustExtremes(xAxis, groupedXData) {\n    // Make sure the X axis extends to show the first group (#2533)\n    // But only for visible series (#5493, #6393)\n    if (defined(groupedXData[0]) &&\n        DataGroupingSeriesComposition_isNumber(xAxis.min) &&\n        DataGroupingSeriesComposition_isNumber(xAxis.dataMin) &&\n        groupedXData[0] < xAxis.min) {\n        if ((!defined(xAxis.options.min) &&\n            xAxis.min <= xAxis.dataMin) ||\n            xAxis.min === xAxis.dataMin) {\n            xAxis.min = Math.min(groupedXData[0], xAxis.min);\n        }\n        xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n    }\n    // When the last anchor set, change the extremes that\n    // the last point is visible (#12455).\n    if (defined(groupedXData[groupedXData.length - 1]) &&\n        DataGroupingSeriesComposition_isNumber(xAxis.max) &&\n        DataGroupingSeriesComposition_isNumber(xAxis.dataMax) &&\n        groupedXData[groupedXData.length - 1] > xAxis.max) {\n        if ((!defined(xAxis.options.max) &&\n            DataGroupingSeriesComposition_isNumber(xAxis.dataMax) &&\n            xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n            xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n        }\n        xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n    }\n}\n/**\n * @private\n */\nfunction anchorPoints(series, groupedXData, xMax) {\n    var options = series.options,\n        dataGroupingOptions = options.dataGrouping,\n        totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize),\n        xData = series.getColumn('x');\n    if (!(dataGroupingOptions &&\n        xData.length &&\n        totalRange &&\n        series.groupMap)) {\n        return;\n    }\n    var groupedDataLastIndex = groupedXData.length - 1,\n        anchor = dataGroupingOptions.anchor,\n        firstAnchor = dataGroupingOptions.firstAnchor,\n        lastAnchor = dataGroupingOptions.lastAnchor;\n    var anchorIndexIterator = groupedXData.length - 1,\n        anchorFirstIndex = 0;\n    // Change the first point position, but only when it is\n    // the first point in the data set not in the current zoom.\n    if (firstAnchor && xData[0] >= groupedXData[0]) {\n        anchorFirstIndex++;\n        var groupStart = series.groupMap[0].start,\n            groupLength = series.groupMap[0].length;\n        var firstGroupEnd = void 0;\n        if (DataGroupingSeriesComposition_isNumber(groupStart) && DataGroupingSeriesComposition_isNumber(groupLength)) {\n            firstGroupEnd = groupStart + (groupLength - 1);\n        }\n        groupedXData[0] = {\n            start: groupedXData[0],\n            middle: groupedXData[0] + 0.5 * totalRange,\n            end: groupedXData[0] + totalRange,\n            firstPoint: xData[0],\n            lastPoint: firstGroupEnd && xData[firstGroupEnd]\n        }[firstAnchor];\n    }\n    // Change the last point position but only when it is\n    // the last point in the data set not in the current zoom,\n    // or if it is not the 1st point simultaneously.\n    if (groupedDataLastIndex > 0 &&\n        lastAnchor &&\n        totalRange &&\n        groupedXData[groupedDataLastIndex] >= xMax - totalRange) {\n        anchorIndexIterator--;\n        var lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n        groupedXData[groupedDataLastIndex] = {\n            start: groupedXData[groupedDataLastIndex],\n            middle: groupedXData[groupedDataLastIndex] + 0.5 * totalRange,\n            end: groupedXData[groupedDataLastIndex] + totalRange,\n            firstPoint: lastGroupStart && xData[lastGroupStart],\n            lastPoint: xData[xData.length - 1]\n        }[lastAnchor];\n    }\n    if (anchor && anchor !== 'start') {\n        var shiftInterval = (totalRange *\n                { middle: 0.5,\n            end: 1 }[anchor]);\n        // Anchor the rest of the points apart from the ones, that were\n        // previously moved.\n        while (anchorIndexIterator >= anchorFirstIndex) {\n            groupedXData[anchorIndexIterator] += shiftInterval;\n            anchorIndexIterator--;\n        }\n    }\n}\n/**\n * For the processed data, calculate the grouped data if needed.\n *\n * @private\n * @function Highcharts.Series#applyGrouping\n */\nfunction DataGroupingSeriesComposition_applyGrouping(hasExtremesChanged) {\n    var series = this,\n        chart = series.chart,\n        options = series.options,\n        dataGroupingOptions = options.dataGrouping,\n        groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n            DataGroupingSeriesComposition_pick(dataGroupingOptions.enabled,\n        chart.options.isStock),\n        reserveSpace = series.reserveSpace(),\n        lastDataGrouping = this.currentDataGrouping;\n    var currentDataGrouping,\n        croppedData,\n        revertRequireSorting = false;\n    // Data needs to be sorted for dataGrouping\n    if (groupingEnabled && !series.requireSorting) {\n        series.requireSorting = revertRequireSorting = true;\n    }\n    // Skip if skipDataGrouping method returns false or if grouping is disabled\n    // (in that order).\n    var skip = skipDataGrouping(series,\n        hasExtremesChanged) === false || !groupingEnabled;\n    // Revert original requireSorting value if changed\n    if (revertRequireSorting) {\n        series.requireSorting = false;\n    }\n    if (skip) {\n        return;\n    }\n    series.destroyGroupedData();\n    var table = dataGroupingOptions.groupAll ?\n            series.dataTable :\n            series.dataTable.modified || series.dataTable,\n        processedXData = series.getColumn('x', !dataGroupingOptions.groupAll),\n        xData = processedXData,\n        plotSizeX = chart.plotSizeX,\n        xAxis = series.xAxis,\n        extremes = xAxis.getExtremes(),\n        ordinal = xAxis.options.ordinal,\n        groupPixelWidth = series.groupPixelWidth;\n    var i,\n        hasGroupedData;\n    // Execute grouping if the amount of points is greater than the limit\n    // defined in groupPixelWidth\n    if (groupPixelWidth &&\n        xData &&\n        table.rowCount &&\n        plotSizeX &&\n        DataGroupingSeriesComposition_isNumber(extremes.min)) {\n        hasGroupedData = true;\n        // Force recreation of point instances in series.translate, #5699\n        series.isDirty = true;\n        series.points = null; // #6709\n        var xMin = extremes.min,\n            xMax = extremes.max,\n            groupIntervalFactor = (ordinal &&\n                xAxis.ordinal &&\n                xAxis.ordinal.getGroupIntervalFactor(xMin,\n            xMax,\n            series)) || 1,\n            interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                groupIntervalFactor,\n            groupPositions = xAxis.getTimeTicks(Axis_DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval,\n            dataGroupingOptions.units ||\n                DataGrouping_DataGroupingDefaults.units), \n            // Processed data may extend beyond axis (#4907)\n            Math.min(xMin,\n            xData[0]),\n            Math.max(xMax,\n            xData[xData.length - 1]),\n            xAxis.options.startOfWeek,\n            processedXData,\n            series.closestPointRange),\n            groupedData = seriesProto.groupData.apply(series,\n            [\n                table,\n                groupPositions,\n                dataGroupingOptions.approximation\n            ]);\n        var modified = groupedData.modified,\n            groupedXData = modified.getColumn('x',\n            true),\n            gapSize = 0;\n        // The smoothed option is deprecated, instead, there is a fallback\n        // to the new anchoring mechanism. #12455.\n        if ((dataGroupingOptions === null || dataGroupingOptions === void 0 ? void 0 : dataGroupingOptions.smoothed) &&\n            modified.rowCount) {\n            dataGroupingOptions.firstAnchor = 'firstPoint';\n            dataGroupingOptions.anchor = 'middle';\n            dataGroupingOptions.lastAnchor = 'lastPoint';\n            error(32, false, chart, {\n                'dataGrouping.smoothed': 'use dataGrouping.anchor'\n            });\n        }\n        // Record what data grouping values were used\n        for (i = 1; i < groupPositions.length; i++) {\n            // The grouped gapSize needs to be the largest distance between\n            // the group to capture varying group sizes like months or DST\n            // crossing (#10000). Also check that the gap is not at the\n            // start of a segment.\n            if (!groupPositions.info.segmentStarts ||\n                groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n            }\n        }\n        currentDataGrouping = groupPositions.info;\n        currentDataGrouping.gapSize = gapSize;\n        series.closestPointRange = groupPositions.info.totalRange;\n        series.groupMap = groupedData.groupMap;\n        series.currentDataGrouping = currentDataGrouping;\n        anchorPoints(series, groupedXData || [], xMax);\n        if (reserveSpace && groupedXData) {\n            adjustExtremes(xAxis, groupedXData);\n        }\n        // We calculated all group positions but we should render only the ones\n        // within the visible range\n        if (dataGroupingOptions.groupAll) {\n            // Keep the reference to all grouped points for further calculation,\n            // used in Heikin-Ashi and hollow candlestick series.\n            series.allGroupedTable = modified;\n            croppedData = series.cropData(modified, xAxis.min || 0, xAxis.max || 0);\n            modified = croppedData.modified;\n            groupedXData = modified.getColumn('x');\n            series.cropStart = croppedData.start; // #15005\n        }\n        // Set the modified table\n        series.dataTable.modified = modified;\n    }\n    else {\n        series.groupMap = void 0;\n        series.currentDataGrouping = void 0;\n    }\n    series.hasGroupedData = hasGroupedData;\n    series.preventGraphAnimation =\n        (lastDataGrouping && lastDataGrouping.totalRange) !==\n            (currentDataGrouping && currentDataGrouping.totalRange);\n}\n/**\n * @private\n */\nfunction DataGroupingSeriesComposition_compose(SeriesClass) {\n    var seriesProto = SeriesClass.prototype;\n    if (!seriesProto.applyGrouping) {\n        var PointClass = SeriesClass.prototype.pointClass;\n        // Override point prototype to throw a warning when trying to update\n        // grouped points.\n        DataGroupingSeriesComposition_addEvent(PointClass, 'update', function () {\n            if (this.dataGroup) {\n                error(24, false, this.series.chart);\n                return false;\n            }\n        });\n        DataGroupingSeriesComposition_addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n        DataGroupingSeriesComposition_addEvent(SeriesClass, 'destroy', destroyGroupedData);\n        DataGroupingSeriesComposition_extend(seriesProto, {\n            applyGrouping: DataGroupingSeriesComposition_applyGrouping,\n            destroyGroupedData: destroyGroupedData,\n            generatePoints: generatePoints,\n            getDGApproximation: getDGApproximation,\n            groupData: groupData\n        });\n    }\n}\n/**\n * Destroy the grouped data points. #622, #740\n * @private\n */\nfunction destroyGroupedData() {\n    // Clear previous groups\n    if (this.groupedData) {\n        this.groupedData.forEach(function (point, i) {\n            if (point) {\n                this.groupedData[i] = point.destroy ?\n                    point.destroy() : null;\n            }\n        }, this);\n        // Clears all:\n        // - `this.groupedData`\n        // - `this.points`\n        // - `preserve` object in series.update()\n        this.groupedData.length = 0;\n        delete this.allGroupedTable;\n    }\n}\n/**\n * Override the generatePoints method by adding a reference to grouped data\n * @private\n */\nfunction generatePoints() {\n    baseGeneratePoints.apply(this);\n    // Record grouped data in order to let it be destroyed the next time\n    // processData runs\n    this.destroyGroupedData(); // #622\n    this.groupedData = this.hasGroupedData ? this.points : null;\n}\n/**\n * Set default approximations to the prototypes if present. Properties are\n * inherited down. Can be overridden for individual series types.\n * @private\n */\nfunction getDGApproximation() {\n    if (this.is('arearange')) {\n        return 'range';\n    }\n    if (this.is('ohlc')) {\n        return 'ohlc';\n    }\n    if (this.is('hlc')) {\n        return 'hlc';\n    }\n    if (\n    // #18974, default approximation for cumulative\n    // should be `sum` when `dataGrouping` is enabled\n    this.is('column') ||\n        this.options.cumulative) {\n        return 'sum';\n    }\n    return 'average';\n}\n/**\n * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n * data into intervals defined by groupPositions, a collection of starting x\n * values for each group.\n *\n * @product highstock\n *\n * @function Highcharts.Series#groupData\n * @param {Highcharts.DataTable} table\n *        The series data table.\n * @param {Array<number>} groupPositions\n *        Group positions.\n * @param {string|Function} [approximation]\n *        Approximation to use.\n * @return {Highcharts.DataGroupingResultObject}\n *         Mapped groups.\n */\nfunction groupData(table, groupPositions, approximation) {\n    var xData = table.getColumn('x', true) || [], yData = table.getColumn('y', true), series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], modified = new Data_DataTableCore(), groupMap = [], dataLength = table.rowCount, \n        // When grouping the fake extended axis for panning, we don't need to\n        // consider y\n        handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), \n        // Data columns to be applied to the modified data table at the end\n        valueColumns = (pointArrayMap || ['y']).map(function () { return []; }), groupAll = (this.options.dataGrouping &&\n            this.options.dataGrouping.groupAll);\n    var pointX,\n        pointY,\n        groupedY,\n        pos = 0,\n        start = 0;\n    var approximationFn = (typeof approximation === 'function' ?\n            approximation :\n            approximation && DataGrouping_ApproximationRegistry[approximation] ?\n                DataGrouping_ApproximationRegistry[approximation] :\n                DataGrouping_ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                    'average')]);\n    // Calculate values array size from pointArrayMap length\n    if (pointArrayMapLength) {\n        var len = pointArrayMap.length;\n        while (len--) {\n            values.push([]);\n        }\n    }\n    else {\n        values.push([]);\n    }\n    var valuesLen = pointArrayMapLength || 1;\n    for (var i = 0; i <= dataLength; i++) {\n        // Start with the first point within the X axis range (#2696)\n        if (xData[i] < groupPositions[0]) {\n            continue; // With next point\n        }\n        // When a new group is entered, summarize and initialize\n        // the previous group\n        while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n            xData[i] >= groupPositions[pos + 1]) ||\n            i === dataLength) { // Get the last group\n            // get group x and y\n            pointX = groupPositions[pos];\n            series.dataGroupInfo = {\n                start: groupAll ? start : (series.cropStart + start),\n                length: values[0].length,\n                groupStart: pointX\n            };\n            groupedY = approximationFn.apply(series, values);\n            // By default, let options of the first grouped point be passed over\n            // to the grouped point. This allows preserving properties like\n            // `name` and `color` or custom properties. Implementers can\n            // override this from the approximation function, where they can\n            // write custom options to `this.dataGroupInfo.options`.\n            if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                // Convert numbers and arrays into objects\n                series.dataGroupInfo.options = DataGroupingSeriesComposition_merge(series.pointClass.prototype\n                    .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                // Make sure the raw data (x, y, open, high etc) is not copied\n                // over and overwriting approximated data.\n                extendedPointArrayMap.forEach(function (key) {\n                    delete series.dataGroupInfo.options[key];\n                });\n            }\n            // Push the grouped data\n            if (typeof groupedY !== 'undefined') {\n                groupedXData.push(pointX);\n                // Push the grouped values to the parallel columns\n                var groupedValuesArr = splat(groupedY);\n                for (var j = 0; j < groupedValuesArr.length; j++) {\n                    valueColumns[j].push(groupedValuesArr[j]);\n                }\n                groupMap.push(series.dataGroupInfo);\n            }\n            // Reset the aggregate arrays\n            start = i;\n            for (var j = 0; j < valuesLen; j++) {\n                values[j].length = 0; // Faster than values[j] = []\n                values[j].hasNulls = false;\n            }\n            // Advance on the group positions\n            pos += 1;\n            // Don't loop beyond the last group\n            if (i === dataLength) {\n                break;\n            }\n        }\n        // Break out\n        if (i === dataLength) {\n            break;\n        }\n        // For each raw data point, push it to an array that contains all values\n        // for this specific group\n        if (pointArrayMap) {\n            var index = groupAll ? i : series.cropStart + i,\n                point = (data && data[index]) ||\n                    series.pointClass.prototype.applyOptions.apply({\n                        series: series\n                    },\n                [dataOptions[index]]);\n            var val = void 0;\n            for (var j = 0; j < pointArrayMapLength; j++) {\n                val = point[pointArrayMap[j]];\n                if (DataGroupingSeriesComposition_isNumber(val)) {\n                    values[j].push(val);\n                }\n                else if (val === null) {\n                    values[j].hasNulls = true;\n                }\n            }\n        }\n        else {\n            pointY = handleYData ? yData[i] : null;\n            if (DataGroupingSeriesComposition_isNumber(pointY)) {\n                values[0].push(pointY);\n            }\n            else if (pointY === null) {\n                values[0].hasNulls = true;\n            }\n        }\n    }\n    var columns = {\n            x: groupedXData\n        };\n    (pointArrayMap || ['y']).forEach(function (key, i) {\n        columns[key] = valueColumns[i];\n    });\n    modified.setColumns(columns);\n    return {\n        groupMap: groupMap,\n        modified: modified\n    };\n}\n/**\n * Handle default options for data grouping. This must be set at runtime because\n * some series types are defined after this.\n * @private\n */\nfunction onAfterSetOptions(e) {\n    var options = e.options,\n        type = this.type,\n        plotOptions = this.chart.options.plotOptions, \n        // External series, for example technical indicators should also inherit\n        // commonOptions which are not available outside this module\n        baseOptions = (this.useCommonDataGrouping &&\n            DataGrouping_DataGroupingDefaults.common),\n        seriesSpecific = DataGrouping_DataGroupingDefaults.seriesSpecific;\n    var defaultOptions = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).defaultOptions.plotOptions[type].dataGrouping;\n    if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n        var rangeSelector = this.chart.rangeSelector;\n        if (!defaultOptions) {\n            defaultOptions = DataGroupingSeriesComposition_merge(DataGrouping_DataGroupingDefaults.common, seriesSpecific[type]);\n        }\n        options.dataGrouping = DataGroupingSeriesComposition_merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n        // Set by the StockChart constructor:\n        plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n            rangeSelector &&\n            DataGroupingSeriesComposition_isNumber(rangeSelector.selected) &&\n            rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n    }\n}\n/**\n * @private\n */\nfunction skipDataGrouping(series, force) {\n    return !(series.isCartesian &&\n        !series.isDirty &&\n        !series.xAxis.isDirty &&\n        !series.yAxis.isDirty &&\n        !force);\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar DataGroupingSeriesComposition = {\n    compose: DataGroupingSeriesComposition_compose,\n    groupData: groupData\n};\n/* harmony default export */ var DataGrouping_DataGroupingSeriesComposition = (DataGroupingSeriesComposition);\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"Templating\"],\"commonjs\":[\"highcharts\",\"Templating\"],\"commonjs2\":[\"highcharts\",\"Templating\"],\"root\":[\"Highcharts\",\"Templating\"]}\nvar highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_ = __webpack_require__(984);\nvar highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default = /*#__PURE__*/__webpack_require__.n(highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_);\n;// ./code/es5/es-modules/Extensions/DataGrouping/DataGrouping.js\n/* *\n *\n *  (c) 2010-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\n\n\nvar format = (highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default()).format;\n\nvar composed = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).composed;\n\nvar DataGrouping_addEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).addEvent, DataGrouping_extend = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).extend, DataGrouping_isNumber = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).isNumber, DataGrouping_pick = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).pick, pushUnique = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).pushUnique;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction DataGrouping_compose(AxisClass, SeriesClass, TooltipClass) {\n    DataGrouping_DataGroupingAxisComposition.compose(AxisClass);\n    DataGrouping_DataGroupingSeriesComposition.compose(SeriesClass);\n    if (TooltipClass &&\n        pushUnique(composed, 'DataGrouping')) {\n        DataGrouping_addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n    }\n}\n/**\n * Extend the original method, make the tooltip's header reflect the grouped\n * range.\n * @private\n */\nfunction onTooltipHeaderFormatter(e) {\n    var _a;\n    var chart = this.chart,\n        time = chart.time,\n        point = e.point,\n        series = point.series,\n        options = series.options,\n        tooltipOptions = series.tooltipOptions,\n        dataGroupingOptions = options.dataGrouping,\n        xAxis = series.xAxis;\n    var xDateFormat = tooltipOptions.xDateFormat || '', xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n    // Apply only to grouped series\n    if (xAxis &&\n        xAxis.options.type === 'datetime' &&\n        dataGroupingOptions &&\n        DataGrouping_isNumber(point.key)) {\n        // Set variables\n        currentDataGrouping = series.currentDataGrouping;\n        dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n            // Fallback to commonOptions (#9693)\n            DataGrouping_DataGroupingDefaults.common.dateTimeLabelFormats;\n        // If we have grouped data, use the grouping information to get the\n        // right format\n        if (currentDataGrouping) {\n            labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n            if (currentDataGrouping.count === 1) {\n                xDateFormat = labelFormats[0];\n            }\n            else {\n                xDateFormat = labelFormats[1];\n                xDateFormatEnd = labelFormats[2];\n            }\n            // If not grouped, and we don't have set the xDateFormat option, get the\n            // best fit, so if the least distance between points is one minute, show\n            // it, but if the least distance is one day, skip hours and minutes etc.\n        }\n        else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n            xDateFormat = xAxis.dateTime.getXDateFormat(point.x, tooltipOptions.dateTimeLabelFormats);\n        }\n        var groupStart = DataGrouping_pick((_a = series.groupMap) === null || _a === void 0 ? void 0 : _a[point.index].groupStart,\n            point.key),\n            groupEnd = groupStart + ((currentDataGrouping === null || currentDataGrouping === void 0 ? void 0 : currentDataGrouping.totalRange) || 0) - 1;\n        formattedKey = time.dateFormat(xDateFormat, groupStart);\n        if (xDateFormatEnd) {\n            formattedKey += time.dateFormat(xDateFormatEnd, groupEnd);\n        }\n        // Replace default header style with class name\n        if (series.chart.styledMode) {\n            formatString = this.styledModeFormat(formatString);\n        }\n        // Return the replaced format\n        e.text = format(formatString, {\n            point: DataGrouping_extend(point, { key: formattedKey }),\n            series: series\n        }, chart);\n        e.preventDefault();\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar DataGroupingComposition = {\n    compose: DataGrouping_compose,\n    groupData: DataGrouping_DataGroupingSeriesComposition.groupData\n};\n/* harmony default export */ var DataGrouping = (DataGroupingComposition);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n */\n/**\n * The position of the point inside the group.\n *\n * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n */\n/**\n * The position of the first or last point in the series inside the group.\n *\n * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n */\n/**\n * Highcharts Stock only.\n *\n * @product highstock\n * @interface Highcharts.DataGroupingInfoObject\n */ /**\n* @name Highcharts.DataGroupingInfoObject#length\n* @type {number}\n*/ /**\n* @name Highcharts.DataGroupingInfoObject#options\n* @type {Highcharts.SeriesOptionsType|undefined}\n*/ /**\n* @name Highcharts.DataGroupingInfoObject#start\n* @type {number}\n*/\n/**\n * Highcharts Stock only.\n *\n * @product highstock\n * @interface Highcharts.DataGroupingResultObject\n */ /**\n* @name Highcharts.DataGroupingResultObject#groupedXData\n* @type {Array<number>}\n*/ /**\n* @name Highcharts.DataGroupingResultObject#groupedYData\n* @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n*/ /**\n* @name Highcharts.DataGroupingResultObject#groupMap\n* @type {Array<DataGroupingInfoObject>}\n*/\n/**\n * Highcharts Stock only. If a point object is created by data\n * grouping, it doesn't reflect actual points in the raw\n * data. In this case, the `dataGroup` property holds\n * information that points back to the raw data.\n *\n * - `dataGroup.start` is the index of the first raw data\n *   point in the group.\n *\n * - `dataGroup.length` is the amount of points in the\n *   group.\n *\n * @sample stock/members/point-datagroup\n *         Click to inspect raw data points\n *\n * @product highstock\n *\n * @name Highcharts.Point#dataGroup\n * @type {Highcharts.DataGroupingInfoObject|undefined}\n */\n(''); // Detach doclets above\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Data grouping is the concept of sampling the data values into larger\n * blocks in order to ease readability and increase performance of the\n * JavaScript charts. Highcharts Stock by default applies data grouping when\n * the points become closer than a certain pixel value, determined by\n * the `groupPixelWidth` option.\n *\n * If data grouping is applied, the grouping information of grouped\n * points can be read from the [Point.dataGroup](\n * /class-reference/Highcharts.Point#dataGroup). If point options other than\n * the data itself are set, for example `name` or `color` or custom properties,\n * the grouping logic doesn't know how to group it. In this case the options of\n * the first point instance are copied over to the group point. This can be\n * altered through a custom `approximation` callback function.\n *\n * @declare   Highcharts.DataGroupingOptionsObject\n * @product   highstock\n * @requires  modules/stock\n * @apioption plotOptions.series.dataGrouping\n */\n/**\n * Specifies how the points should be located on the X axis inside the group.\n * Points that are extremes can be set separately. Available options:\n *\n * - `start` places the point at the beginning of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n *\n * - `middle` places the point in the middle of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n *\n * - `end` places the point at the end of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n *         Changing the point x-coordinate inside the group.\n *\n * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n *\n * @type       {Highcharts.DataGroupingAnchor}\n * @since 9.1.0\n * @default    start\n * @apioption  plotOptions.series.dataGrouping.anchor\n */\n/**\n * The method of approximation inside a group. When for example 30 days\n * are grouped into one month, this determines what value should represent\n * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n * is \"ohlc\" by default, which finds the open, high, low and close values\n * within all the grouped data. For ranges, the approximation is \"range\",\n * which finds the low and high values. For multi-dimensional data,\n * like ranges and OHLC, \"averages\" will compute the average for each\n * dimension.\n *\n * Custom aggregate methods can be added by assigning a callback function\n * as the approximation. This function takes a numeric array as the\n * argument and should return a single numeric value or `null`. Note\n * that the numeric array will never contain null values, only true\n * numbers. Instead, if null values are present in the raw data, the\n * numeric array will have an `.hasNulls` property set to `true`. For\n * single-value data sets the data is available in the first argument\n * of the callback function. For OHLC data sets, all the open values\n * are in the first argument, all high values in the second etc.\n *\n * Since v4.2.7, grouping meta data is available in the approximation\n * callback from `this.dataGroupInfo`. It can be used to extract information\n * from the raw data.\n *\n * Defaults to `average` for line-type series, `sum` for columns, `range`\n * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n *         Approximation callback with custom data\n * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n *         Simple approximation demo\n *\n * @type       {Highcharts.DataGroupingApproximationValue|Function}\n * @apioption  plotOptions.series.dataGrouping.approximation\n */\n/**\n * Datetime formats for the header of the tooltip in a stock chart.\n * The format can vary within a chart depending on the currently selected\n * time range and the current data grouping.\n *\n * The default formats are:\n * ```js\n * {\n *     millisecond: [\n *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n *     ],\n *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n *     week: ['%v %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n *     month: ['%B %Y', '%B', '-%B %Y'],\n *     year: ['%Y', '%Y', '-%Y']\n * }\n * ```\n *\n * For each of these array definitions, the first item is the format\n * used when the active time span is one unit. For instance, if the\n * current data applies to one week, the first item of the week array\n * is used. The second and third items are used when the active time\n * span is more than two units. For instance, if the current data applies\n * to two weeks, the second and third item of the week array are used,\n *  and applied to the start and end date of the time span.\n *\n * @type      {Object}\n * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n */\n/**\n * Enable or disable data grouping.\n *\n * @type      {boolean}\n * @default   true\n * @apioption plotOptions.series.dataGrouping.enabled\n */\n/**\n * Specifies how the first grouped point is positioned on the xAxis.\n * If firstAnchor and/or lastAnchor are defined, then those options take\n * precedence over anchor for the first and/or last grouped points.\n * Available options:\n *\n * -`start` places the point at the beginning of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n *\n * -`middle` places the point in the middle of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n *\n * -`end` places the point at the end of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n *\n * -`firstPoint` the first point in the group\n * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n *\n * -`lastPoint` the last point in the group\n * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n *         Applying first and last anchor.\n *\n * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n *\n * @type       {Highcharts.DataGroupingAnchorExtremes}\n * @since 9.1.0\n * @default    start\n * @apioption  plotOptions.series.dataGrouping.firstAnchor\n */\n/**\n * When data grouping is forced, it runs no matter how small the intervals\n * are. This can be handy for example when the sum should be calculated\n * for values appearing at random times within each hour.\n *\n * @type      {boolean}\n * @default   false\n * @apioption plotOptions.series.dataGrouping.forced\n */\n/**\n * The approximate pixel width of each group. If for example a series\n * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n * is performed. If however the series contains so many points that\n * the spacing is less than the groupPixelWidth, Highcharts will try\n * to group it into appropriate groups so that each is more or less\n * two pixels wide. If multiple series with different group pixel widths\n * are drawn on the same x axis, all series will take the greatest width.\n * For example, line series have 2px default group width, while column\n * series have 10px. If combined, both the line and the column will\n * have 10px by default.\n *\n * @type      {number}\n * @default   2\n * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n */\n/**\n * By default only points within the visible range are grouped. Enabling this\n * option will force data grouping to calculate all grouped points for a given\n * dataset. That option prevents for example a column series from calculating\n * a grouped point partially. The effect is similar to\n * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n * not affect yAxis extremes.\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n *         Two series with the same data but different groupAll setting\n *\n * @type      {boolean}\n * @default   false\n * @since     6.1.0\n * @apioption plotOptions.series.dataGrouping.groupAll\n */\n/**\n * Specifies how the last grouped point is positioned on the xAxis.\n * If firstAnchor and/or lastAnchor are defined, then those options take\n * precedence over anchor for the first and/or last grouped points.\n * Available options:\n *\n * -`start` places the point at the beginning of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n *\n * -`middle` places the point in the middle of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n *\n * -`end` places the point at the end of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n *\n * -`firstPoint` the first point in the group\n * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n *\n * -`lastPoint` the last point in the group\n * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n *         Applying first and last anchor.\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n *         Applying the last anchor in the chart with live data.\n *\n * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n *\n * @type       {Highcharts.DataGroupingAnchorExtremes}\n * @since 9.1.0\n * @default    start\n * @apioption  plotOptions.series.dataGrouping.lastAnchor\n */\n/**\n * Normally, a group is indexed by the start of that group, so for example\n * when 30 daily values are grouped into one month, that month's x value\n * will be the 1st of the month. This apparently shifts the data to\n * the left. When the smoothed option is true, this is compensated for.\n * The data is shifted to the middle of the group, and min and max\n * values are preserved. Internally, this is used in the Navigator series.\n *\n * @type      {boolean}\n * @default   false\n * @deprecated\n * @apioption plotOptions.series.dataGrouping.smoothed\n */\n/**\n * An array determining what time intervals the data is allowed to be\n * grouped to. Each array item is an array where the first value is\n * the time unit and the second value another array of allowed multiples.\n *\n * Defaults to:\n * ```js\n * units: [[\n *     'millisecond', // unit name\n *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n * ], [\n *     'second',\n *     [1, 2, 5, 10, 15, 30]\n * ], [\n *     'minute',\n *     [1, 2, 5, 10, 15, 30]\n * ], [\n *     'hour',\n *     [1, 2, 3, 4, 6, 8, 12]\n * ], [\n *     'day',\n *     [1]\n * ], [\n *     'week',\n *     [1]\n * ], [\n *     'month',\n *     [1, 3, 6]\n * ], [\n *     'year',\n *     null\n * ]]\n * ```\n *\n * @type      {Array<Array<string,(Array<number>|null)>>}\n * @apioption plotOptions.series.dataGrouping.units\n */\n/**\n * The approximate pixel width of each group. If for example a series\n * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n * is performed. If however the series contains so many points that\n * the spacing is less than the groupPixelWidth, Highcharts will try\n * to group it into appropriate groups so that each is more or less\n * two pixels wide. Defaults to `10`.\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n *         Two series with the same data density but different groupPixelWidth\n *\n * @type      {number}\n * @default   10\n * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n */\n''; // Required by JSDoc parsing\n\n;// ./code/es5/es-modules/masters/modules/datagrouping.js\n\n\n\n\n\n\nvar G = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\nG.dataGrouping = G.dataGrouping || {};\nG.dataGrouping.approximationDefaults = (G.dataGrouping.approximationDefaults ||\n    DataGrouping_ApproximationDefaults);\nG.dataGrouping.approximations = (G.dataGrouping.approximations ||\n    DataGrouping_ApproximationRegistry);\nDataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n/* harmony default export */ var datagrouping_src = ((highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()));\n\n__webpack_exports__ = __webpack_exports__[\"default\"];\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});"],"names":["root","factory","exports","module","require","define","amd","__WEBPACK_EXTERNAL_MODULE__944__","__WEBPACK_EXTERNAL_MODULE__512__","__WEBPACK_EXTERNAL_MODULE__984__","ColumnUtils","AxisConstructor","DateTimeAxis","__webpack_modules__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","__webpack_exports__","datagrouping_src","highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_","highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default","DataGrouping_ApproximationRegistry","arrayMax","arrayMin","correctFloat","extend","isNumber","average","arr","len","length","ret","sum","hasNulls","ApproximationDefaults","averages","forEach","arguments","push","close","high","hlc","low","ohlc","open","range","DataGrouping_DataGroupingDefaults","common","groupPixelWidth","dateTimeLabelFormats","millisecond","second","minute","hour","day","week","month","year","seriesSpecific","line","spline","area","areaspline","arearange","column","columnrange","candlestick","heikinashi","units","addEvent","DataGroupingAxisComposition_extend","merge","pick","applyGrouping","e","axis","series","getGroupPixelWidth","hasProcessed","hasExtremesChanged","dataLength","dgOptions","i","doGrouping","options","dataGrouping","Math","max","dataTable","modified","rowCount","chart","plotSizeX","forced","onAfterSetScale","setDataGrouping","redraw","update","seriesOptions","ordinal","slope","AxisClass","axisProto","__spreadArray","to","from","pack","ar","l","Array","slice","concat","setLength","asSubarray","isArray","splice","start","deleteCount","removedAsSubarray","items","removed","apply","array","Constructor","getPrototypeOf","constructor","result","set","subarray","Data_ColumnUtils","fireEvent","objectEach","uniqueKey","DataTableCore","_this","autoId","id","columns","versionTag","columnName","applyRowCount","deleteRows","rowIndex","length_1","getColumn","asReference","getColumns","columnNames","keys","reduce","getRow","map","_a","setColumn","eventDetail","setColumns","silent","setRow","row","insert","indexRowCount","cellValue","addColumns","DateTimeAxis_addEvent","getMagnitude","normalizeTickInterval","timeUnits","getTimeTicks","time","onAfterSetType","type","dateTime","Additions","compose","keepProps","includes","normalizeTimeTickInterval","tickInterval","unitsOption","unit","interval","multiples","count","unitRange","unitName","getXDateFormat","x","closestPointRange","getDateFormat","startOfWeek","resolveDTLFormat","main","Axis_DateTimeAxis","highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_","seriesProto","highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default","DataGroupingSeriesComposition_addEvent","defined","error","DataGroupingSeriesComposition_extend","DataGroupingSeriesComposition_isNumber","DataGroupingSeriesComposition_merge","DataGroupingSeriesComposition_pick","splat","baseGeneratePoints","generatePoints","DataGroupingSeriesComposition_applyGrouping","hasGroupedData","currentDataGrouping","croppedData","dataGroupingOptions","groupingEnabled","allowDG","enabled","isStock","reserveSpace","lastDataGrouping","revertRequireSorting","requireSorting","skip","skipDataGrouping","force","isCartesian","isDirty","xAxis","yAxis","destroyGroupedData","table","groupAll","processedXData","extremes","getExtremes","min","points","groupedXData","xMin","xMax","groupIntervalFactor","getGroupIntervalFactor","groupPositions","xData","groupedData","groupData","approximation","gapSize","smoothed","firstAnchor","anchor","lastAnchor","info","segmentStarts","indexOf","totalRange","groupMap","anchorPoints","groupedDataLastIndex","anchorIndexIterator","anchorFirstIndex","groupStart","groupLength","firstGroupEnd","middle","end","firstPoint","lastPoint","lastGroupStart","shiftInterval","dataMin","dataMax","allGroupedTable","cropData","cropStart","preventGraphAnimation","point","destroy","getDGApproximation","is","cumulative","pointX","pointY","groupedY","yData","data","dataOptions","handleYData","values","pointArrayMap","pointArrayMapLength","extendedPointArrayMap","valueColumns","pos","approximationFn","valuesLen","dataGroupInfo","pointClass","optionsToObject","groupedValuesArr","j","index","applyOptions","val","onAfterSetOptions","plotOptions","baseOptions","useCommonDataGrouping","defaultOptions","rangeSelector","userOptions","isInternal","selected","buttonOptions","SeriesClass","dataGroup","highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_","format","highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default","composed","DataGrouping_addEvent","DataGrouping_extend","DataGrouping_isNumber","DataGrouping_pick","pushUnique","onTooltipHeaderFormatter","xDateFormatEnd","labelFormats","formattedKey","tooltipOptions","xDateFormat","formatString","isFooter","groupEnd","dateFormat","styledMode","styledModeFormat","text","preventDefault","G","approximationDefaults","approximations","DataGrouping","TooltipClass","DataGrouping_DataGroupingAxisComposition","DataGrouping_DataGroupingSeriesComposition","Axis","Series","Tooltip"],"mappings":"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"}